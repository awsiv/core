\input texinfo-altfont
\input texinfo-logo
\input texinfo
@selectaltfont{cmbright}
@setlogo{CFEngineFrontPage}
@c *********************************************************************
@c
@c  This is a TEXINFO file. It generates both TEX documentation and
@c  the "on line" documentation "info" files.
@c
@c  The file is structured like a programming language. Each chapter
@c  starts with a chapter comment.
@c
@c  Menus list the subsections so that an online info-reader can parse
@c  the file hierarchically.
@c
@c ***********************************************************************@c 
@c %** start of header
@setfilename novaevaluationguidesupplement.info
@settitle Supplement to CFEngine 3 Nova Evaluation Guide
@c @setchapternewpage odd
@c %** end of header
@titlepage
@title Supplement to CFEngine 3 Nova Evaluation Guide
@subtitle CFEngine Enterprise Documentation
@subtitle Updated 23. January 2012
@author CFEngine
@c @smallbook
@fonttextsize 10
@c @page
@vskip 0pt plus 1filll
@cartouche
This document supplements the @samp{CFEngine 3 Nova Evaluation Guide} with examples for all report types available in the CFEngine 3 Nova Mission Portal.
@end cartouche
Copyright @copyright{} 2012 CFEngine AS.
The features described herein are in provided for user convenience and imply no warranty whatsoever
to the extent of applicable law.
@end titlepage
@c *************************** File begins here ************************
@ifinfo
@dircategory CFEngine Training
@direntry
* CFEngine Reference:
                        CFEngine is a language based framework
                        designed for configuring and maintaining
                        Unix-like operating systems attached
                        to a TCP/IP network.
@end direntry
@end ifinfo
@ifnottex
@node Top, Standard reports in CFEngine 3 Nova, (dir), (dir)
@top Supplement to CFEngine 3 Nova Evaluation Guide
@end ifnottex

@ifhtml
@html
<a name="Contents">
@contents
@end html
@end ifhtml

@iftex
@contents
@end iftex


@menu
* Standard reports in CFEngine 3 Nova::  
* CDP reports::                 
@end menu

@c *****************************************************
@c * CHAPTER
@c *****************************************************
@c @node 
@c @chapter Introduction


@c *****************************************************
@c * CHAPTER
@c *****************************************************
@node  Standard reports in CFEngine 3 Nova, CDP reports, Top, Top
@chapter Standard reports in CFEngine 3 Nova

Standard reports in CFEngine 3 Nova can be accessed through the @samp{Reports finder} in the @samp{Engineering} room. The finder lists all standard report categories and each category contains information about different aspects of the Mission. When you click one of them, the @samp{Report finder} will present a query form that is adapted to the chosen report category. CFEngine uses regular expressions in these queries, for maximum flexibility and to minimize system impact. The details of these queries and the content of the resulting reports are outlined in the following sections.

@c A significant capability of CFEngine 3 Nova is automated system reporting: it collects history, state and change data about computers and ties them together. A report is a tabular summary of CFEngineâ€™s internal information, tailored to a particular purpose, searchable, and describes attributes and qualities of managed hosts. The CFEngine strategy is to replace conventional CMDBs with a more scalable and flexible approach to information mining; we name it a CFDB.

@c Standard reports in CFEngine 3 Nova can be accessed through the @samp{Reports finder} in the @samp{Engineering} room. The finder lists eighteen standard report categories and each category contains information about different aspects of the Mission; the Report finder therefore presents different queries according to what report category you wish to investigate. CFEngine uses regular expressions in these queries, for maximum flexibility and to minimize system impact. The details of these queries and the content of the resulting reports are outlined in the following sections.

@c To access standard reports, click the @samp{Engineering} icon in the Mission Portal, then the @samp{Reports finder} in the Engineering room:

@c @sp 1
@c @center @image{img-gotoengineering,7cm,,Go to Engineering}
@c @center Figure: Go to Engineering
@c @sp 1

@c @center @image{img-gotoreportsfinder,10cm,,Go to reports finder}
@c @center Figure: Go to Reports finder

@c @page

@c @sp 1
@c @center @image{img-reportsfinder,11cm,,Reports finder}
@c @center Figure: Reports finder
@c @sp 1

@c @noindent List of standard reports:
@c @itemize -
@c     @item Bundle profile: Status of promise bundles and when they were last verified
@c     @item Business value report: Accumulated value of promises kept
@c     @item Class profile: User defined classes observed on the system
@c     @item Compliance by promise: Compliance of each promise individually
@c     @item Compliance summary: Total summary of host compliance
@c     @item File change log: Log of all detected changes to files from changes promises
@c     @item File change diffs: Delta/difference comparison showing file changes
@c     @item Last saw hosts: Log of when neighboring hosts were last observed online
@c     @item Patches available: A list of patches currently claimed to be available by the local package manager
@c     @item Patch status: A list of (un)applied patches according to the local package manager
@c     @item Performance: Execution time used to verify selected promises
@c     @item Promises repaired log: Log of actual repairs made to the system
@c     @item Promises repaired summary: Cumulative (histogram) summary of promises repaired
@c     @item Promises not kept log: Log of promises that could not or would not be kept
@c     @item Promises not kept summary: Cumulative (histogram) summary of promises not kept
@c     @item Setuid/gid root programs: Current list of observed setuid/setgid root programs
@c     @item Software installed: List of software packages claimed to be installed according to the local package manager
@c     @item Variables: Table of variable values last observed
@c @end itemize


@c -----------------------------------------------------
@menu
* Bundle profile report::       
* Business value report::       
* Class profile report::        
* Compliance by promise report::  
* Compliance summary report::   
* File change log report::      
* File change diffs report::    
* Last saw hosts report::       
* Patches available report::    
* Patch status report::         
* Performance report::          
* Promises repaired log report::  
* Promises repaired summary report::  
* Promises not kept log report::  
* Promises not kept summary report::  
* Setuid/gid root programs report::  
* Software installed report::   
* Variables report::            
@end menu

@node Bundle profile report, Business value report, Standard reports in CFEngine 3 Nova, Standard reports in CFEngine 3 Nova
@section Bundle profile report

Promises are the fundamental statements in CFEngine, they make up the definition of the desired state of a system. A @i{bundle} is a collection of promises in a `sub-routine-like' container. The purpose of bundles is to allow greater flexibility to break down the contents of policies and give them names. Bundles also allow to re-use promise code by parameterizing it. 

The @samp{Bundle profile report} is useful for checking when specific bundles were last verified and for seeing statistics about the frequency of verification. Click on @b{Bundle profile} in the @samp{Reports finder} to open a query window:

@sp 1
@center @image{img-gotobundleprofilequery,10cm,,Go to bundle profile query}
@center Figure: Go to Bundle profile query
@sp 1

The Bundle profile query can filter by bundle pattern (pattern in bundle name) and host class (i.e. the class/context of a bundle). Leaving the fields blank will result in a report listing all bundles in your policies.

@sp 1
@center @image{img-bundleprofilequery,10cm,,Bundle profile query}
@center Figure: Bundle profile query
@sp 1

Once you have clicked @b{Generate report}, CFEngine 3 Nova will list an overview of bundles that suit the query criteria entered above. It displays the host names on which these bundles can be found (@samp{Host}), the name of the bundles (@samp{Bundle}), the time stamp at the moment of verification (@samp{Last verified}), the time passed since last verification (@samp{Hours ago}), the average time between each verification (@samp{Avg interval}), and the uncertainty of that average (@samp{Uncertainty}, measured in one standard deviation of @samp{Avg interval}). You can add your personal note in the right column, documenting any thoughts or issues that you might have about the query result. The @samp{Last verified} value is yellow if more than six hours have passed since last verification.

@sp 1
@center @image{img-bundleprofilereport,15cm,,Bundle profile report}
@center Figure: Bundle profile report
@sp 1

@c Click a bundle name to access details of that specific bundle through the bundle viewer. 
@c @cartouche
@c *** Explain further steps ***
@c @end cartouche


@c -----------------------------------------------------
@node Business value report, Class profile report, Bundle profile report, Standard reports in CFEngine 3 Nova
@section Business value report

One of the capabilities of CFEngine 3 Nova is to add business or organizational value to the configuration
model. The notion of business value is not necessarily a clear concept, but a simple approach is to attach a monetary value to the outcome of promises.

CFEngine's default values for promises kept, promises repaired and promises not kept are 1, 0.5, and -1, respectively. The values are summed and recorded at a set time interval, and the results are summarized for every host and day. 

Click on @b{Business value} in the @samp{Reports finder} to open a query window:

@sp 1
@center @image{img-businessvaluequery,10cm,,Business value query}
@center Figure: Business value query
@sp 1

The Business value query can filter by date and host class (i.e. the class/context of a host). Leaving the fields blank will result in a report listing the business value of all promises that have had value attached to them over all hosts and days.

Once you have clicked @b{Generate report}, CFEngine 3 Nova will list an overview of hosts that suit the query criteria entered above. The result presents each host name (@samp{Host}), date (@samp{Day}), and the sum of the value of the promises kept (@samp{Kept}), repaired (@samp{Repaired}), and not kept (@samp{Not kept}). You can add your personal note in the right column, documenting any thoughts or issues that you might have about the query result.

@sp 1
@center @image{img-businessvaluereport,15cm,,Business value report}
@center Figure: Business value report
@sp 1

@c We will look at an example of how to attach business value of specific promises at a later stage, when it is time to edit a file in the integrated policy editor.


@c -----------------------------------------------------
@node Class profile report, Compliance by promise report, Business value report, Standard reports in CFEngine 3 Nova
@section Class profile report

CFEngine classes are certain true/false (Boolean) propositions that determine in what context, or setting, a promise is made. Each time CFEngine runs (by default every five minutes), it discovers and classifies properties of the environment in which it runs. These discovered properties are called 'hard classes' and cannot be changed by users. CFEngine also operates with soft classes, i.e. user-defined types.

@c CFEngine decisions are made by classes, certain true/false (Boolean) propositions that determine in what context a promise is made. There are no if-then-else statements in CFEngine; all decisions are made with classes. Each time CFEngine runs (by default every five minutes), the underlying agent discovers and classifies properties of the environment or context in which it runs. These discovered properties are called 'hard classes' and cannot be changed by users. CFEngine also operates with soft classes, i.e. user-defined types.

The Class profile report is useful for looking at hosts in specific contexts, for instance to find out which machines run on windows. Click on @b{Class profile} in the @samp{Reports finder} to open a query window:

@sp 1
@center @image{img-classprofilequery,10cm,,Class profile query}
@center Figure: Class profile query
@sp 1

The class profile query can filter by (pattern in) class name and host class (i.e. the context of a host). Leaving the fields blank will result in a report listing all hosts and classes.

Once you have clicked @b{Generate report}, CFEngine 3 Nova will list an overview of hosts that suit the query criteria entered above. The result presents the host names (@samp{Host}), @samp{Class context}, probability of occurrence (@samp{Occurs with probability}), @samp{Uncertainty} (standard deviation of @samp{Occurs with probability}), and the last time the class was observed (@samp{Last seen}).

@sp 1
@center @image{img-classprofilereport,15cm,,Class profile report}
@center Figure: Class profile report
@sp 1


@c -----------------------------------------------------
@node Compliance by promise report, Compliance summary report, Class profile report, Standard reports in CFEngine 3 Nova
@section Compliance by promise report

Promises are the fundamental statements in CFEngine, the policy atoms. Promises can be made about all kinds of different subjects, from file attributes, to the execution of commands, access control decisions and knowledge relationships. If there is no promise, nothing happens. It is considered compliant if CFEngine is able to keep the promise, and conversely, not compliant, or not kept, in the opposite case. 

The @samp{Compliance by promise} report is useful for checking the current status of your system in high detail. You can find out which parts of a bundle work and which do not. The report also predicts the probability of compliance based on the history of specific promises, allowing you to assess the degree to which the problem is of a more transient or permanent nature. Click on @b{Compliance by promise} in the @samp{Reports finder} to open a query window:

@sp 1
@center @image{img-compliancebypromisequery,10cm,,Compliance by promise query}
@center Figure: Compliance by promise query
@sp 1

The compliance by promise query can filter by (patterns in) promise handle, any/compliant/repaired/non-compliant promises (drop-down menu), and host class (i.e. the context of a host). Leaving the fields blank will result in a report listing all hosts and and promises.

Once you have clicked @b{Generate report}, CFEngine 3 Nova will list an overview of hosts that suit the query criteria entered above. The result presents the host names (@samp{Host}), the promise identifier @samp{Promise handle}, @samp{Last known state} (compliant or not compliant), likelihood of a promise being compliant (@samp{Probability kept}), uncertainty of the likelihood (@samp{Uncertainty}, measured in one standard deviation of @samp{Probability kept}), and the time stamp of the last time the promise was run.

@sp 1
@center @image{img-compliancebypromisereport,15cm,,Compliance by promise report}
@center Figure: Compliance by promise report
@sp 1

@c Click a promise handle to access details of that specific promise through the promise viewer. 
@c @cartouche
@c *** Explain further steps ***
@c @end cartouche


@c -----------------------------------------------------
@node Compliance summary report, File change log report, Compliance by promise report, Standard reports in CFEngine 3 Nova
@section Compliance summary report

CFEngine policies are collections of promises contained in a text file, they are the CFEngine scripts that define what state you want your system to be in. The compliance summary report gives an overview of policy status. It shows the current status of your system in a coarse manner, allowing you to quickly identify which areas need follow-up. Click on @b{Compliance summary} in the @samp{Reports finder} to open a query window:

@sp 1
@center @image{img-compliancesummaryquery,10cm,,Compliance summary query}
@center Figure: Compliance summary query
@sp 1

The compliance summary query can filter by (pattern in) promise handle and host class (i.e. the context of a host). Leaving the fields blank will result in a report listing all hosts and and policies.

Once you have clicked @b{Generate report}, CFEngine 3 Nova will list an overview of hosts that suit the query criteria entered above. The result presents the host names (@samp{Host}), policy file name (@samp{Policy}), percentage of promises kept within the listed policies (@samp{Kept}), percentage of promises repaired within the listed policies (@samp{Repaired}), percentage of promises not kept within the listed policies (@samp{Not kept}), and the time stamp of the last status check (@samp{Last seen}).

@sp 1
@center @image{img-compliancesummaryreport,15cm,,Compliance summary report}
@center Figure: Compliance summary report
@sp 1


@c -----------------------------------------------------
@node File change log report, File change diffs report, Compliance summary report, Standard reports in CFEngine 3 Nova
@section File change log report

File change monitoring is about detecting when file information on a computer system changes. Awareness of changes is often considered a major part of management, especially if they are unexpected or inadvertent (expected changes are usually not a problem). With CFEngine you can either set a general tripwire to detect all changes, or, in the case of the @samp{File change log}, monitor specific files with changes promises. The report gives you relative detail of change as it presents the name of files that have been changed, when they were changed and on what host they were changed.

The file change log query can filter by (patterns in) file name and host class (i.e. the class/context of a host). Leaving the fields blank will result in a report listing changes detected on all monitored hosts and and policies.

@sp 1
@center @image{img-filechangelogquery,10cm,,File change log query}
@center Figure: File change log query
@sp 1

Once you have clicked @b{Generate report}, CFEngine 3 Nova will list an overview of hosts that suit the query criteria entered above. The result presents the host names (@samp{Host}), name of the file where a change was detected (@samp{File}), and time stamp of change detection (@samp{Change detected at}). You can add your personal note in the right column, documenting any thoughts or issues that you might have about the query result.

@sp 1
@center @image{img-filechangelogreport,15cm,,File change log report}
@center Figure: File change log report
@sp 1


@c -----------------------------------------------------
@node File change diffs report, Last saw hosts report, File change log report, Standard reports in CFEngine 3 Nova
@section File change diffs report

A diff is a file comparison utility that outputs the differences between two files. It is typically used to show the changes between one version of a file and a former version of the same file. Diff displays the changes made per line for text files. Once a file change has been identified, for instance as seen in the file change log, you can browse the details of that change in a file change diff report. 

The file change diff query can filter by (pattern in) file name, (pattern in) diff content, and host class (i.e. the class/context of a host). Leaving the fields blank will result in a report listing changes detected on all monitored hosts and and policies.

@sp 1
@center @image{img-filechangediffsquery,10cm,,File change diffs query}
@center Figure: File change diffs query
@sp 1

Once you have clicked @b{Generate report}, CFEngine 3 Nova will list an overview of hosts that suit the query criteria entered above. The result presents the host names (@samp{Host}), name of the file where a change was detected (@samp{File}), the time stamp of change detection (@samp{Change detected at}), and the actual diff (whether a line was added or deleted, the line number, and the content of the change; @samp{Change added (+), deleted (-); Line no; Content }).

@sp 1
@center @image{img-filechangediffsreport,15cm,,File change diffs report}
@center Figure: File change diffs report
@sp 1


@c -----------------------------------------------------
@node Last saw hosts report, Patches available report, File change diffs report, Standard reports in CFEngine 3 Nova
@section Last saw hosts report

Sometimes it is not possible to connect to a machine under CFEngine's management, either due to network errors or temporary lack of network entirely (for instance on ships at sea or submarines). CFEngine 3 Nova's Mission Portal monitors all connections, incoming and outgoing, between all managed hosts, and creates a log of when neighboring hosts were last observed online. This information is used to set the host availability status and, through analysis of the connection history, give an idea of the regularity of connections between hosts.

The Last saw hosts report is useful for checking the communication pattern between managed hosts and when they last were in touch with each other. Click on @b{Last saw hosts} in the Report finder to open a query window as described previously.

@sp 1
@center @image{img-lastsawhostsquery,10cm,,Last saw hosts query}
@center Figure: Last saw hosts query
@sp 1

The Last saw hosts query can filter by (patterns in) remote host name, remote host IP address, remote host key, minimum hours ago (since the last connection was made), and host class (i.e. the class/context of a host). Leaving the fields blank will result in a report listing all connections made to and from the managed machines (including the hub).

Once you have clicked @b{Generate report}, CFEngine 3 Nova will list an overview of all communication that suits the query criteria entered above. Every connection is logged on the concerned nodes as incoming (Initiated by them) or outgoing (Initiated by us), the same connection will therefore appear twice in the report (once for each node). The results are presented in the following column format: @samp{Host} (host name), @samp{Initiated} (identifies whether the connection is incoming (@code{by them (-)}) or outgoing (@code{by us (+)}), @samp{Remote host name}, @samp{Remote host IP address}, @samp{Last seen} (time stamp of the connection), @samp{Hours ago} (interval between current time and Last seen), @samp{Avg interval} (average time between each connection), @samp{Uncertainty} (standard deviation of Average interval), and @samp{Remote host key} (identifying key of the remote host).

@sp 1
@center @image{img-lastsawhostsreport,15cm,,Last saw hosts report}
@center Figure: Last saw hosts report
@sp 1

@c @cartouche
@c *** Use case: check if anyone else except policy hub has tried to get in touch with a client.
@c Filter on remote host name (DNS name, not class): @code{(?:(?!policyhub).)*}
@c sort by host
@c Use case: Which machines connect at regular intervals, which are "unstable". ***
@c @end cartouche

@c 7 machines, 26 entries in last seen because all incoming and outgoing requests are recorded:
@c 2 the policy hub contacts itself and is contacted by itself
@c 6 x 2: 6 hosts. For each hub-client contact, both the hub and the client report incoming and outgoing connection (2 connections) 
@c 6 x 2: 6 hosts. For each client-hub contact, both the client and the hub report incoming and outgoing connection (2 connections)


@c -----------------------------------------------------
@node Patches available report, Patch status report, Last saw hosts report, Standard reports in CFEngine 3 Nova
@section Patches available report

Software packaging is a core paradigm in operating system release management today, and CFEngine supports a generic approach to integration with native operating support for packaging. Package promises allow CFEngine to make promises the state of software packages conditionally, given the assumption that a native package manager will perform the actual manipulations. Since no agent can make unconditional promises about another, this is the best that can be achieved. 

Some package systems also support the idea of patches. These might be formally different objects to packages; a patch might contain material for several packages and be numbered differently. When you select patching-policy, the package name can be a regular expression that will match possible patch names, otherwise identifying specific patches can be cumbersome.

The patches available report is useful to get an overview of patches claimed to be available by the local package manager. Click on @b{Patches available} in the @samp{Reports finder} to open a query window:

@sp 1
@center @image{img-patchesavailablequery,10cm,,Patches available query}
@center Figure: Patches available query
@sp 1

The Patches available query can filter by (patterns in) package name, package version, package architecture, and host class. Leaving the fields blank will result in a report listing all patches that can be installed on the system.

Once you have clicked @b{Generate report}, CFEngine 3 Nova will list an overview of patches that suit the query criteria entered above. The report presents the following columns: @samp{Host} (host name), @samp{Name} (name of the package/patch), @samp{Version} (patch version), and @samp{Architecture}.

@sp 1
@center @image{img-patchesavailablereport,15cm,,Patches available report}
@center Figure: Patches available report
@sp 1


@c -----------------------------------------------------
@node Patch status report, Performance report, Patches available report, Standard reports in CFEngine 3 Nova
@section Patch status report

Patch management can be a delicate business: sometimes a patch can cause new problems, or perhaps even more problems than it fixes. IT managers therefore often like to be in control of what patches are applied to a system. The Patch status report gives system administrators a complete overview of applied patches according to the local package manager, and, in conjunction with the patches available report, allows them to consciously decide which patches to apply or not. 

Click on @b{Patch status} in the @samp{Reports finder} to open a query window:

@sp 1
@center @image{img-patchstatusquery,10cm,,Patch status query}
@center Figure: Patch status query
@sp 1

The Patch status query can filter by (patterns in) package name, package version, package architecture, and host class. Leaving the fields blank will result in a report listing all patches applied to the system.

Once you have clicked @b{Generate report}, CFEngine 3 Nova will list an overview of patches that suit the query criteria entered above. The report presents results in the same format as the Patches available report: @samp{Host} (host name), @samp{Name} (name of the package/patch), @samp{Version} (patch version), and @samp{Architecture}.

@sp 1
@center @image{img-patchstatusreport,15cm,,Patch status report}
@center Figure: Patch status report
@sp 1

@c Patching is a subtle business with CFEngine, there is no simple way using the patch settings to install `all new system patches'. Here's why:

@c If we specify the name of a patch, then CFEngine will try to see if it exists and/or is installed. If it exists in the pending list, it will be installed.  If it exists in the installed list it will not be installed. Now consider the pattern @samp{.*}. This will match any installed package, so CFEngine will assume the relevant patch has been installed already.  On the other hand, the pattern @samp{no match} will not match an installed patch, but it will not match a named patch either, so nothing is installed.

@c Some systems provide a command to do this, which can be specified without specific patch arguments. If so, that command can be called periodically under @code{commands}. The main purposes of patching body items are:

@c @itemize
@c @item To install specific named patches in a controlled manner.
@c @item To generate reports of available and installed patches during system reporting.
@c @end itemize


@c -----------------------------------------------------
@node Performance report, Promises repaired log report, Patch status report, Standard reports in CFEngine 3 Nova
@section Performance report

CFEngine 3 Nova uses several monitoring probes to reflect on general system performance@footnote{See also section on Vital signs in the CFEngine 3 Nova Owner's Manual.}. One probe looks at the time it takes to execute selected promises; results are summarized in the @samp{Performance report}. The user can thus evaluate which parts of a policy put charge on the system in terms of time spent completing a task. Longer tasks, such as command execution and file copying, are measured by default, but other tasks have to be measured explicitly by stating so in a policy. Note however that most promises made in CFEngine are executed so fast we are not able to measure the time it takes to complete them.

Click on @b{Performance} in the @samp{Reports finder} to open a query window:

@sp 1
@center @image{img-performancequery,10cm,,Performance query}
@center Figure: Performance query
@sp 1

The Performance query can filter by (patterns in) job name and host class. Leaving the fields blank will result in a report listing the performance of all monitored jobs.
@c @footnote{Job names are given in the definition of the promise, we will get back to this in the policy editing example.}

Once you have clicked @b{Generate report}, CFEngine 3 Nova will list an overview of events that suit the query criteria entered above. @samp{Host} (host name), @samp{Event} (job name), @samp{Last time} (most recent performance value, i.e. the time it took to complete the job), @samp{Avg time} (average of all Last time), @samp{Uncertainty} (expressed as one standard deviation of @samp{Avg time}), and @samp{Last performed} (time stamp of last execution). You can add your personal note in the right column, documenting any thoughts or issues that you might have about the query result.

@sp 1
@center @image{img-performancereport,15cm,,Performance report}
@center Figure: Performance report
@sp 1



@c -----------------------------------------------------
@node Promises repaired log report, Promises repaired summary report, Performance report, Standard reports in CFEngine 3 Nova
@section Promises repaired log report

The Status room in the Nova Mission Portal gives an overview of the general status of your system, including six hour summaries of promises kept, repaired, and not kept from the last week. The Promises repaired log is useful to get a complete overview of the history of promises repaired, including execution order and events that are more than a week old. Click on @b{Promises repaired log} in the @samp{Reports finder} to open a query window:

@sp 1
@center @image{img-promisesrepairedlogquery,10cm,, Promises repaired log query}
@center Figure:  Promises repaired log query
@sp 1

The Promise repaired log query can filter by (patterns in) promise handles, host class (i.e. the class/context of a host), and a desired time interval. Leaving the fields blank will result in a report listing all promises that were repaired and the time of occurrence.

Once you have clicked @b{Generate report}, CFEngine 3 Nova will list an overview of promises that suit the query criteria entered above. The results are presented as @samp{Host} (host name), @samp{Promise handle} (identifier of the promise), @samp{Report} (what was repaired), and @samp{Time} (time stamp of the repair action). You can add your personal note in the right column, documenting any thoughts or issues that you might have about the query result.

@sp 1
@center @image{img-promisesrepairedlogreport,15cm,, Promises repaired log report}
@center Figure: Promises repaired log report
@sp 1


@c -----------------------------------------------------
@node Promises repaired summary report, Promises not kept log report, Promises repaired log report, Standard reports in CFEngine 3 Nova
@section Promises repaired summary report

If the Promises repaired log is too detailed for your needs, the Promises repaired summary report eliminates the time stamp of the promises repaired and presents a cumulative summary of promises repaired, i.e. the total number times a promise has been repaired. Click on @b{Promises repaired summary} in the @samp{Reports finder} to open a query window:

@sp 1
@center @image{img-promisesrepairedsummaryquery,10cm,, Promises repaired summary query}
@center Figure:  Promises repaired summary query
@sp 1

The Promise repaired summary query can filter by (patterns in) promise handles, host class (i.e. the class/context of a host), and a desired time interval. Leaving the fields blank will result in a report listing all promises that were repaired and their cumulative number of occurrences.

Once you have clicked @b{Generate report}, CFEngine 3 Nova will list an overview of promises that suit the query criteria entered above. The results are presented as @samp{Promise handle} (identifier of the promise), @samp{Report} (what was repaired), and @samp{Occurrences} (number of occurrences of repair).

@sp 1
@center @image{img-promisesrepairedsummaryreport,15cm,, Promises repaired summary report}
@center Figure: Promises repaired summary report
@sp 1


@c -----------------------------------------------------
@node Promises not kept log report, Promises not kept summary report, Promises repaired summary report, Standard reports in CFEngine 3 Nova
@section Promises not kept log report

The Status room in the Nova Mission Portal gives an overview of the general status of your system, including six hour summaries of promises kept, repaired, and not kept from the last week. The Promises not kept log is useful to get a complete overview of the history of promises not kept, including execution order and events that are more than a week old. Click on @b{Promises not kept log} in the @samp{Reports finder} to open a query window:

@sp 1
@center @image{img-promisesnotkeptlogquery,10cm,, Promises not kept log query}
@center Figure:  Promises not kept log query
@sp 1

The Promises not kept log query can filter by (patterns in) promise handles, host class (i.e. the class/context of a host), and a desired time interval. Leaving the fields blank will result in a report listing all promises that were not kept and the time of occurrence.

Once you have clicked @b{Generate report}, CFEngine 3 Nova will list an overview of promises that suit the query criteria entered above. The results are presented as @samp{Host} (host name), @samp{Promise handle} (identifier of the promise), @samp{Report} (what was not kept), and @samp{Time} (time stamp of the event). You can add your personal note in the right column, documenting any thoughts or issues that you might have about the query result.

@sp 1
@center @image{img-promisesnotkeptlogreport,15cm,, Promises not kept log report}
@center Figure:  Promises not kept log report
@sp 1


@c -----------------------------------------------------
@node Promises not kept summary report, Setuid/gid root programs report, Promises not kept log report, Standard reports in CFEngine 3 Nova
@section Promises not kept summary report

If the Promises not kept log is too detailed for your needs, the Promises not kept summary report eliminates the time stamp of the promises repaired and presents a cumulative summary of promises repaired, i.e. the total number times a promise was not kept. Click on @b{Promises not kept summary} in the @samp{Reports finder} to open a query window:

@sp 1
@center @image{img-promisesnotkeptsummaryquery,10cm,, Promises not kept summary query}
@center Figure: Promises not kept summary query
@sp 1

The Promise not kept summary query can filter by (patterns in) promise handles, host class (i.e. the class/context of a host), and a desired time interval. Leaving the fields blank will result in a report listing all promises that were not kept and their cumulative number of occurrences.

Once you have clicked @b{Generate report}, CFEngine 3 Nova will list an overview of promises that suit the query criteria entered above. The results are presented as @samp{Promise handle}, @samp{Report} (what was not kept), and @samp{Occurrences} (the number of times the promise was not kept).

@sp 1
@center @image{img-promisesnotkeptsummaryreport,15cm,, Promises not kept summary report}
@center Figure: Promises not kept summary report
@sp 1


@c -----------------------------------------------------
@node Setuid/gid root programs report, Software installed report, Promises not kept summary report, Standard reports in CFEngine 3 Nova
@section Setuid/gid root programs report

@c from wikipedia
@code{setuid} and @code{setgid} (short for "set user ID upon execution" and "set group ID upon execution", respectively) are Unix access right flags that allow users to run an executable with the permissions of the executable's owner or group. They are often used to allow users on a computer system to run programs with temporarily elevated privileges in order to perform a specific task. The @samp{Setuid/gid root programs report} is useful to get an overview of what processes have been elevated to root privileges and potentially uncover security issues.

@c setuid and setgid are needed for tasks that require higher privileges than those which common users have, such as changing their login password.[2] Some of the tasks that require elevated privileges may not immediately be obvious, though â€” such as the ping command, which must send and listen for control packets on a network interface.

@c The setuid and setgid flags, when set on a directory, have an entirely different meaning. Setting the setgid permission on a directory (chmod g+s) causes new files and subdirectories created within it to inherit its group ID, rather than the primary group ID of the user who created the file (the owner ID is never affected, only the group ID). Newly created subdirectories inherit the setgid bit. Note that setting the setgid permission on a directory only affects the group ID of new files and subdirectories created after the setgid bit is set, and is not applied to existing entities. Setting the setgid bit on existing subdirectories must be done manually

@c The setuid permission set on a directory is ignored on UNIX and Linux systems.[4] FreeBSD can be configured to interpret it analogously to setgid, namely, to force all files and sub-directories to be owned by the top directory owner.[5]

@c In FreeBSD, directories behave as if their setgid bit was always set, regardless of its actual value. As is stated in open(2), "When a new file is created it is given the group of the directory which contains it."

Click on @b{Setuid/gid root programs} in the @samp{Reports finder} to open a query window:

@sp 1
@center @image{img-setuidgidrootprogramsquery,10cm,, Setuid/gid root programs query}
@center Figure: Setuid/gid root programs query
@sp 1

The Setuid/gid root programs query can filter by (patterns in) file name or host class. Leaving the fields blank will result in a report listing all hosts and files that have their permissions elevated to root.

@sp 1
@center @image{img-setuidgidrootprogramsreport,15cm,, Setuid/gid root programs report}
@center Figure: Setuid/gid root programs report
@sp 1

Once you have clicked @b{Generate report}, CFEngine 3 Nova will list an overview of promises that suit the query criteria entered above. The results are presented as host name and files that have their permissions elevated to root.


@c -----------------------------------------------------
@node Software installed report, Variables report, Setuid/gid root programs report, Standard reports in CFEngine 3 Nova
@section Software installed report

The @samp{Software installed report} will list the software packages claimed to be installed according to the local package manager. Click on @b{Software installed} in the @samp{Reports finder} to open a query window:

@sp 1
@center @image{img-softwareinstalledquery,10cm,, Software installed query}
@center Figure: Software installed query
@sp 1

The Software installed query can filter by (patterns in) software name, version, architecture, or host class. Leaving the fields blank will result in a report listing all hosts and software installed on the system.

Once you have clicked @b{Generate report}, CFEngine 3 Nova will list an overview that suits the query criteria entered above. The results are presented as @samp{Host} (host name), @samp{Name} (of software package), @samp{Version} (of software package), and @samp{Architecture} (of machine on which software runs).

@sp 1
@center @image{img-softwareinstalledreport,15cm,, Software installed report}
@center Figure: Software installed report
@sp 1


@c -----------------------------------------------------
@node Variables report,  , Software installed report, Standard reports in CFEngine 3 Nova
@section Variables report

@c Scalar variables are written @samp{$(name)} in CFEngine, and they represent a single value at a time. When they are written without a context, e.g. @samp{$(myvar)}, they are local to the current bundle (i.e. their scope is the current bundle). They are globally available everywhere provided one uses the context to verify them; e.g. @samp{$(context.myvar)} may be used to access the variable `myvar' in bundle `context'.

The @samp{Variables report} is useful for tracking your variables and checking their values, for instance to see if they behave in the expected manner. Click on @b{Variables} in the @samp{Reports finder} to open a query window:

@sp 1
@center @image{img-variablesquery,10cm,, Variables query}
@center Figure: Variables query
@sp 1

The Variables query can filter by (patterns in) scope (bundle where the variable is used), Lvalue (name of variable), Rvalue (content of variable), type, or host class. Leaving the fields blank will result in a report listing all variables that were last observed on the system.

Once you have clicked @b{Generate report}, CFEngine 3 Nova will list an overview of variables that suit the query criteria entered above. The results are presented in table form/blocks of scope (i.e. in which bundle the variables appear) with the following column format: @samp{Host} (name of host where the variable is defined), @samp{Type} (type of the variable, @samp{Name}, and @samp{Value}.

@sp 1
@center @image{img-variablesreport,15cm,, Variables report}
@center Figure: Variables report
@sp 1


@c ------------------------------------------------------
@c @node
@c @section Example: Performance report

@c Example: how to explicitly monitor performance (execution time) of a promise.
@c @verbatim

@c body common control
@c {
@c bundlesequence => {  "test" };
@c }

@c bundle agent test
@c {
@c command:
@c    "/bin/sleep 10"
@c       action  => background;
@c       action  => performance_measure;
@c }

@c body action performance_measure
@c {
@c    measurement_class => "$(this.promiser) job scan of file sleep command";
@c }

@c @end verbatim


@c *****************************************************
@c * CHAPTER
@c *****************************************************
@node  CDP reports,  , Standard reports in CFEngine 3 Nova, Top
@chapter CDP reports

@menu
* ACLs report - File access controls::  
* Commands report - Scheduled commands to execute::  
* File changes report - File changes observed on the system ::  
* File diffs report - Delta/difference comparison showing file changes::  
* Registry report - Promised Windows registry setting status::  
* Services report - System service status::  
@end menu

Content-Driven Policies (CDP) were introduced to make policy management easier. In contrast to policies written in the CFEngine language, they are composed of semi-colon separated fields in a text file that the user fills with content, like a spreadsheet or tabular file. Each line in the file is parsed and results in a specific type of promise being made. Reports based on data from CDP policies can be found in @samp{Engineering room}: click the @b{Engineering} icon in the Mission Portal, then the @b{CDP reports} finder in the Engineering room:

@sp 1
@center @image{img-gotoengineering,7cm,,Go to Engineering}
@center Figure: Go to Engineering
@sp 1

@center @image{img-gotocdpreportsfinder,13cm,,Go to CDP reports finder}
@center Figure: Go to CDP reports finder

@sp 1
@center @image{img-cdpreportfinder,11cm,,Reports finder}
@center Figure: CDP reports finder
@sp 1

@noindent We will now go through the different CDP reports and their corresponding input files.
@c @noindent CFEngine 3 Nova comes with six default CDPs:

@c @itemize -
@c @item ACLs: File access controls
@c @item Commands: Scheduled commands to execute
@c @item File changes: File changes observed on the system
@c @item File diffs: Delta/difference comparison showing file changes
@c @item Registry: Promised Windows registry setting status
@c @item Services: System service status
@c @end itemize

@c We will go through each type of CDP report below to explain the contents.


@c ------------------------------------------------------
@node ACLs report - File access controls, Commands report - Scheduled commands to execute, CDP reports, CDP reports
@section ACLs report - File access controls

An access control list (ACL) is a list of permissions attached to an object. An ACL specifies which users or system processes are granted access to objects, as well as what operations are allowed on given objects. Each entry in a typical ACL specifies a subject and an operation. For instance, if a file has an ACL that contains (Alice, delete), this would give Alice permission to delete the file.

@page
Click on @b{ACLs} in the @samp{CDP Reports finder} to access the ACLs CDP report:

@sp 1
@center @image{img-aclsreport,15cm,, ACLs report}
@center Figure: ACLs report
@sp 1

The report lists an overview of host name (@samp{Host}), path of the affected object (@samp{Path}), the permission setting (@samp{Permission (ACL)}), owner of the affected object (@samp{Owner}), action to execute on the object (@samp{Action}), the context in which the promise was made (@samp{Class expression}), state of compliance (@samp{State}), and the time the promise was last checked (@samp{Last checked}).

The default CFEngine 3 Nova ACLs policies allow you to set permissions to directories and files using two different input files (@file{acl_directory_list.txt} and @file{acl_file_list.txt}, respectively). We will limit ourselves to look at one of these in the following example as they are conceptually identical.

The file @file{acl_file_list.txt} can be found under the @file{cdp_inputs} catalog in the policy editor, click it to open:

@sp 1
@center @image{img-openaclfilelistinput,11cm,, open ACLs input file}
@center Figure: Open the ACLs input file
@sp 1

@page
@noindent The content of the file looks like this (lines have been split and indented for presentability):

@verbatim

   #
   #  ACLs On Files
   #
   #  FORMAT:   path;entity_type1:entity_name1:perms1,
         entity_type2:entity_name2:perms2,...;owner;action;class_expression
   #
   #  EXAMPLE:  C:\tmp;user:Administrator:rwx,user:SYSTEM:r;
         Administrator;fix;windows
   #

   # Windows 2003
   c:\WINDOWS\system32\drivers\etc\hosts;user:Administrator:rw,user:SYSTEM:rw,
       user:Guest:r;SYSTEM;fix;Windows_Server_2003.!Hr09
   c:\WINDOWS\system32\drivers\etc\hosts;user:Administrator:rw,user:SYSTEM:rw,
       user:Guest:rw;SYSTEM;fix;Windows_Server_2003.Hr09
   # Windows 2008
   c:\Windows\System32\drivers\etc\hosts;user:Administrator:rw,user:SYSTEM:rw,
       user:Guest:r;SYSTEM;fix;Windows_Server_2008_R2.!Hr11
   c:\Windows\System32\drivers\etc\hosts;user:Administrator:rw,user:SYSTEM:rw,
       user:Guest:rw;SYSTEM;fix;Windows_Server_2008_R2.Hr11

@end verbatim

We need to look at the header of the file to understand its structure. We saw in the CDP reports introduction that the input consisted of lines containing semi colon separated fields, so anything with a @samp{;} before or after it is a field entry. The structure of these fields are explained in the @code{FORMAT} section of the file header, here we have:

@verbatim

  #  FORMAT:   path;entity_type1:entity_name1:perms1,
         entity_type2:entity_name2:perms2,...;owner;action;class_expression

@end verbatim

@noindent Splitting this up into separate fields:
@table @i
@item path 
Path of file to set permissions on.

@item entity_type1:entity_name1:perms1
This field defines the permissions (@samp{perms1}) that a user (@samp{entity_type1}), and member of the group (@samp{entity_name1}), has on the file defined in @samp{path}.

@item entity_type2:entity_name2:perms2,...
Same as entity_type1:entity_name1:perms1, but for different user, group, and permission settings.

@item owner
Defines the owner of the file defined in @samp{path}

@item action
Tells CFEngine what to do if the file permissions differ from what was defined in the ACLs policy. Can take the values @samp{fix} (set permissions as defined in ACLs policy), @samp{warn} (log and display a warning that the file permissions differ from what was defined in ACLs policy), and @samp{nop} (no operation; no log entry, but print a warning in command-line interface).

@item class_expression
Context in which the permissions are set, i.e. a class expression (boolean) that needs to be fulfilled for the permissions to be set.
@end table


@c ------------------------------------------------------
@node Commands report - Scheduled commands to execute, File changes report - File changes observed on the system , ACLs report - File access controls, CDP reports
@section Commands report - Scheduled commands to execute

You may use the Commands CDP to schedule script execution on specific hosts. The Commands CDP uses a combination of class expressions to set the context (i.e. time and place) of execution. 

Click on @b{Commands} in the @samp{CDP Reports finder} to access the Commands CDP report:

@sp 1
@center @image{img-commandsreport,15cm,, Commands report}
@center Figure: Commands report
@sp 1

The report lists an overview of host name (@samp{Host}), the command to execute (@samp{Command}), the class to define if execution fails (@samp{Failclass}), action to execute if there is an error (@samp{Action}; see explanation of the CDP input file below for possible values), the context in which the promise was made (@samp{Class expression}), state of compliance (@samp{State}), and the time the promise was last checked (@samp{Last checked}).

The Commands CDP input file, @file{command_list.txt}, can be found in the left menu in the @file{cdp_inputs} catalog. The content looks like this (lines have been split and indented for presentability):

@verbatim

   #
   #  Command Execution
   #
   #  FORMAT:   command_path;on_error_define_class;action;class_expression
   #
   #  EXAMPLE:  c:\windows\system32\cmd.exe /c "echo hello";hello_failed;fix;
         DomainController
   #
   #  NOTE:     You may use this Content-Driven Policy to schedule script
   #            execution on a class of hosts by using a combination of
   #            host and time classes in class_expression, e.g. set
   #            class_expression to "windows.Tuesday.Hr10.Min30_35".
   #

   c:\windows\system32\cmd.exe /c "eho hello";hello_failed;fix;windows.Hr11
   c:\windows\system32\cmd.exe /c "echo hello";hello_failed;fix;windows.!Hr11
   c:\windows\system32\cmd.exe /c "echo hello failed > c:\reportfile.txt";
       report_failed;fix;hello_failed.windows
   c:\windows\system32\cmd.exe /c "echo hello succeeded > c:\reportfile.txt";
       report_failed;fix;!hello_failed.windows
   /usr/bin/sleep 5;sleep_failed_solaris;fix;solaris
   /bin/sleep 5;sleep_failed_solaris;fix;linux

@end verbatim

@noindent Again, we need to look at the header of the file to understand its structure:

@verbatim

   #  FORMAT:   command_path;on_error_define_class;action;class_expression

@end verbatim

@noindent Separating the fields:
@table @i
@item command_path
Path of command to execute.

@item on_error_define_class
Class to define if there is an error in command execution.

@item action
Tells CFEngine what to do if there is an error in command execution. Can take the values @samp{fix} (attempt to re-execute the command), @samp{warn} (log and display a warning that the command could not be executed), and @samp{nop} (no operation; no log entry, but print a warning in command-line interface).

@item class_expression
Context in which the command is to be executed, i.e. a class expression (boolean) that needs to be fulfilled for the command to take place. In the above example (@code{windows.Tuesday.Hr10.Min30_35}) the command will only be executed on Windows machines on Tuesdays between 10.30am and 10.35am.
@end table

@c ------------------------------------------------------
@node File changes report - File changes observed on the system , File diffs report - Delta/difference comparison showing file changes, Commands report - Scheduled commands to execute, CDP reports
@section File changes report - File changes observed on the system 

We saw that awareness of changes often is considered a major part of infrastructure management in the walk-through of the CFEngine 3 Nova standard reports. The file changes CDP policy differs slightly from the Files changes log report in that it will restore the original file upon detecting a change and report whether the file remains compliant or not.

Click on @b{File changes} in the @samp{CDP Reports finder} to access the File changes CDP report:

@sp 1
@center @image{img-filechangesreport,15cm,, File changes report}
@center Figure: File changes report
@sp 1

The report lists an overview of host name (@samp{Host}), the path of the concerned file (@samp{Path}), the context in which the promise was made (@samp{Class expression}), time stamp of when a change was detected (@samp{Last Change Detected}), state of compliance (@samp{State}), and the time the promise was last checked (@samp{Last checked}).

The File changes CDP input file, @file{file_change_list.txt}, can be found in the left menu in the @file{cdp_inputs} catalog. The content looks like this:

@verbatim

   #
   #  File Changes Detection and Revert
   #
   #  FORMAT:   file_path;class_expression
   #
   #  EXAMPLE:  C:\pwd.txt;windows
   #
   #  NOTE:     The file is always restored on change, and change
   #            reports will be generated.
   #            Use file_diff Content-Driven Policy to allow changes.
   #

   /etc/shadow;linux|solarisx86

@end verbatim

Looking at the header of the file:
@verbatim

   #  FORMAT:   file_path;class_expression

@end verbatim

@noindent Separating the fields:
@table @i
@item file_path
Path of file to monitor and repair changes on.

@item class_expression
Context in which the change detection/repair is to be executed, i.e. a class expression (boolean) that needs to be fulfilled for the event to take place.
@end table

@c ------------------------------------------------------
@node File diffs report - Delta/difference comparison showing file changes, Registry report - Promised Windows registry setting status, File changes report - File changes observed on the system , CDP reports
@section File diffs report - Delta/difference comparison showing file changes

The file diff CDP policy does the same as the File change CDP policy, except that it does not repair the file to original state if a change is detected. Click on @b{File diffs} in the @samp{CDP Reports finder} to access the File diffs report:

@sp 1
@center @image{img-filediffsreport,15cm,, File diffs report}
@center Figure: File diffs report
@sp 1

The report lists an overview of host name (@samp{Host}), the path of the concerned file (@samp{Path}), the context in which the promise was made (@samp{Class expression}), time stamp of when a change was detected (@samp{Last Change Detected}), state of compliance (@samp{State}), and the time the promise was last checked (@samp{Last checked}).

The File diff CDP input file, @file{file_diff_list.txt}, can be found in the left menu in the @file{cdp_inputs} catalog. The content looks like this:

@verbatim

   #
   #  File Difference Reporting
   #
   #  FORMAT:   file_path;class_expression
   #
   #  EXAMPLE:  C:\users.txt;windows
   #
   #  NOTE:     The file is always allowed to change. 
   #            Use file_change Content-Driven Policies to revert a 
   #	        changed file. Detailed change reports will 
   #            be generated.
   #

   /etc/group;linux|solarisx86

@end verbatim

@noindent Looking at the header of the file:
@verbatim

   #  FORMAT:   file_path;class_expression

@end verbatim

@noindent Separating the fields:
@table @i
@item file_path
Path of file to monitor and warn about changes on.

@item class_expression
Context in which the change detection/warning is to be executed, i.e. a class expression (boolean) that needs to be fulfilled for the event to take place.
@end table


@c ------------------------------------------------------
@node Registry report - Promised Windows registry setting status, Services report - System service status, File diffs report - Delta/difference comparison showing file changes, CDP reports
@section Registry report - Promised Windows registry setting status

The Windows Registry is a hierarchical database that stores configuration settings and options on Microsoft Windows operating systems. It contains settings for low-level operating system components as well as the applications running on the platform. Registry keys are similar to folders: in addition to values, each key can contain subkeys, which may contain further subkeys, and so on. Keys are referenced with a syntax similar to Windows' path names, using backslashes to indicate levels of hierarchy. Each subkey has a mandatory name, which is a non-empty string that cannot contain any backslash, and whose letter case is insignificant.

Click on @b{Registry} in the @samp{CDP Reports finder} to access the Registry report:

@sp 1
@center @image{img-registryreport,15cm,, Registry report}
@center Figure: Registry report
@sp 1

The report lists an overview of host name (@samp{Host}), the key identifier (@samp{Key}), the key value (@samp{Value}), action to take if there is an error in the key (@samp{Action}; see explanation of the CDP input file below for possible values), the context in which the promise was made (@samp{Class expression}), the state of compliance (@samp{State}), and the time the promise was last checked (@samp{Last checked}).

The Registry CDP input file, @file{registry_list.txt}, can be found in the left menu in the @file{cdp_inputs} catalog. The content looks like this (lines have been split and indented for presentability):

@verbatim

   #
   #  Windows Registry Management
   #
   #  FORMAT:   key;name,type,data;action;class_expression
   #
   #  EXAMPLE:  HKEY_CURRENT_USER\Control Panel\Desktop;ScreenSaverIsSecure,
         REG_SZ,1;fix;windows
   #
   #  NOTE:     Currently, type must be REG_SZ (string).
   #

   HKEY_CURRENT_USER\Control Panel\Desktop;ScreenSaverIsSecure,REG_SZ,1;
      fix;windows.!Hr11
   HKEY_CURRENT_USER\Control Panel\Desktop;ScreenSaverIsSecure,REG_SZ,0;
      fix;windows.Hr11
   HKEY_CURRENT_USER\Control Panel\Desktop;ScreenSaveTimeOut,REG_SZ,600;
      fix;windows.!Hr11
   HKEY_CURRENT_USER\Control Panel\Desktop;ScreenSaveTimeOut,REG_SZ,1200;
      fix;windows.Hr11

@end verbatim

Looking at the header of the file:
@verbatim

   #  FORMAT:   key;name,type,data;action;class_expression

@end verbatim

@noindent Separating the fields:
@table @i
@item key
The path to the key in question.

@item name,type,data
Name, type, and value of the key.  

@item action
Tells CFEngine what to do if there is a difference between the registry entry and the definition in the Registry CDP. Can take the values @samp{fix} (set the registry entry as defined in the  Registry CDP), @samp{warn} (log and display a warning that the there is a discrepancy between the registry entry and the Registry CDP), and @samp{nop} (no operation; no log entry, but print a warning in command-line interface).

@item class_expression
Context in which the promise is to be executed, i.e. a class expression (boolean) that needs to be fulfilled for the command to take place.
@end table


@c ------------------------------------------------------
@node Services report - System service status,  , Registry report - Promised Windows registry setting status, CDP reports
@section Services report - System service status

Services are programs that once started run continuously in the background. They perform specific functions which are designed not to require user intervention and are ready for input or monitor changes in your system and respond to them. For example, the Apache server has a daemon called httpd that listens on port 80 on your machine. When it receives a request for a page it sends the appropriate data back to the client machine.

With the three lines of semicolon separated fields, we ensure the correct status of three services on all our Windows machines and are given specialized reports on the outcome. The Content-Driven Policy services report is shown below. 
Click on @b{Services} in the @samp{CDP Reports finder} to access the Services report:

@sp 1
@center @image{img-servicesreport,15cm,, Services report}
@center Figure: Services report
@sp 1

The report lists an overview of host name (@samp{Host}), @samp{Service Name}, the runstatus of the service (@samp{Runstatus}), action to take if there is a difference from policy (@samp{Action}; see explanation of the CDP input file below for possible values), the context in which the promise was made (@samp{Class expression}), the state of compliance (@samp{State}), and the time the promise was last checked (@samp{Last checked}).

The Registry CDP input file, @file{service_list.txt}, can be found in the left menu in the @file{cdp_inputs} catalog. The content looks like this (lines have been split and indented for presentability):

@verbatim

   #
   #  Windows Service Management
   #
   #  FORMAT:   service_name;run_status;action;class_expression
   #
   #  EXAMPLE:  Dnscache;start;fix;windows
   #
   #  NOTE:     Service name is not the "Display name" 
   #            -- see the properties of the service. 
   #            run_status can be start/stop/disable. If start then 
   #            the service is started, if disable then service is 
   #            stopped and "Startup type" is set to disable,
   #   	        if stop, then service is stopped "Startup type" is left 
   #            unchanged.
   #

   Dnscache;stop;fix;windows.Hr10
   wuauserv;stop;fix;windows.Hr10
   Dnscache;start;fix;windows.!Hr10
   wuauserv;start;fix;windows.!Hr10

@end verbatim

@noindent Looking at the header of the file:
@verbatim

   #  FORMAT:   service_name;run_status;action;class_expression

@end verbatim

@noindent Separating the fields:
@table @i
@item service_name
Name of the service (not necessarily the same as the display name, see properties of the service).

@item run_status
The run status of the service defines whether it should be running or not. Can take the values @samp{start}, @samp{stop}, or @samp{disable} (will stop the service and change its startup mode to disable, i.e. will not be restarted upon reboot of the machine, for example).

@item action
Tells CFEngine what to do if there is a difference between the run status what has been defined in the Services CDP. Can take the values @samp{fix} (set the run status as defined in the Services CDP), @samp{warn} (log and display a warning that the there is a discrepancy between the run status and the Services CDP), and @samp{nop} (no operation; no log entry, but print a warning in command-line interface).

@item class_expression
Context in which the promise is to be executed, i.e. a class expression (boolean) that needs to be fulfilled for the command to take place.
@end table



@c =========================================================================
@c @node Index,  , CFEngine Methods, Top
@c @unnumbered Concept Index
@c @printindex cp
@c =========================================================================


@c  The file is structured like a programming language. Each chapter
@c  starts with a chapter comment.
@c
@c  Menus list the subsections so that an online info-reader can parse
@c  the file hierarchically.
@ifhtml
@html
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-2576171-2");
pageTracker._initData();
pageTracker._trackPageview();
</script>
@end html
@end ifhtml
@bye
