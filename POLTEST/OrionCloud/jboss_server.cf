# 
# The Cfengine Cloud Pack, Copyright  (C) Cfengine AS, Oslo Norway
# --------------------------------------------------------------------
# 
# This file is provided under a perpetual license as part of tjhe
# Cfengine Cloud Pack (hereby called The Software). The Software may be
# used within a single Internet Domain. If no Internet Domain is
# registered, it may be used within a single legal organization
# possessing a maximum of 1024 computers, or by a single individual with
# up to 250 computers. Multiple licenses may be purchased, as needed.
# 
# The Licensee may modify, adapt and create derivative works based upon
# the Software, for use within its organisation and for sharing between
# other consecutive licensees. However, the Licensee shall not
# reproduce, distribute, resell, rent, lease or disclose the Software in
# any manner or form to any other third party not holding a license for
# the Software.
# 
# The Licensee may not transfer any of its rights under this agreement
# without the prior and express written consent of Cfengine.
# 
# INTELLECTUAL PROPERTY RIGHTS
# 
# Cfengine does not transfer any copyrights or other intellectual
# property rights relating to the Software to the Licensee. Such rights
# are protected by intellectual property legislation in the United
# States, Europe and other jurisdictions and by international treaty
# provisions. Cfengine and its suppliers retain all rights in the
# Software that are not expressly granted to the Licensee through this
# license.
# 
# The Licensee is not allowed to remove, alter or destroy any proprietary,
# trademark or copyright markings or notices placed upon or contained
# within the Software.
# 
# NO WARRANTY
# 
# To the maximum extent permitted by law, Cfengine disclaims any
# warranty for the Software. The Software, any services and any related
# documentation are provided on an "as is" basis without warranty of any
# kind, whether express or implied, including, but not limited to,
# implied warranties of merchantability, fitness for a particular
# purpose or non-infringement. Hereunder the parties acknowledges that
# Cfengine does not warrant for the performance of any data centre on
# which the Software runs, or the absence of any errors in the Software,
# and that any such errors does not constitute a contractual defect.
# 
# LIABILITY
# 
# The liability of the parties in contract, tort (including negligence)
# or otherwise shall for all incidents during the entire term of 30 days
# from the date of purchase be limited to a half of the fees paid for a
# perpetual license. Cfengine or its suppliers shall not be liable for
# any special, incidental, indirect or consequential damages whatsoever
# (including, without limitation, damages for loss of business profits,
# lost savings, business interruption, loss of business information,
# personal injury, loss of privacy, loss of goodwill or any other
# financial loss) arising out of the use of or inability to use the
# Software, even if advised of the possibility of such damages.
# 
# THIRD-PARTY TERMS
# 
# For third-party software that is integrated with or used by
# Cfengine, the current terms of the relevant third party software
# supplier shall apply.
#
#######################################################
# Jboss webserver
#######################################################
#
# Scenario:
# Prepare JAVA environment with JBOSS up and running
#

bundle common j_def
{
 vars:

  any::

   "jboss_user"     string => "jboss";
   "jboss_group"    string => "jboss";
   "jboss_home"     string => "/home/jboss";
   "jboss_work_dir" string => "/opt";

   "cache_dir" string => "$(sys.workdir)/cache";
}

#######################################################

bundle agent app_jboss_account
{
 vars:

  any::

   "check_jboss_account" string => execresult("/bin/grep jboss /etc/passwd","noshell");

 classes:

  any::

   "no_jboss_account" not => regcmp("^jboss.*","$(check_jboss_account)");   

 commands:

  no_jboss_account::

   "/usr/sbin/useradd -d /home/$(j_def.jboss_user) -m -s /bin/sh $(j_def.jboss_user)";
}

#######################################################

bundle agent jboss_server
{
 vars:

  centos::

   "jboss_pkgs" slist => {
                          "java-1.6.0-openjdk",
                          "java-1.6.0-openjdk-devel",
                          "java-1.6.0-openjdk-javadoc",
                          "java-1.6.0-openjdk-demo",
                          "unzip"
                         };

  ubuntu::

   "jboss_pkgs" slist => {
        # We persuade you install sun-java manually to avoid human interact
#                          "sun-java6-bin",
#                          "sun-java6-jdk",
#                          "sun-java6-jre",
                          "openjdk-6-jdk",
                          "openjdk-6-jre",
                          "openjdk-6-doc",
                          "openjdk-6-demo",
                          "openjdk-6-dbg",
                          "openjdk-6-source",
                          "unzip"
                         };

#

 classes:

  any::

   "no_jboss" not => fileexists("$(j_def.jboss_work_dir)/jboss");

#

 files:  

  any::

   "$(j_def.jboss_home)/install_jboss_from_zip.sh"
            comment => "Create a script to fetch and install JBOSS",
             create => "true",
              perms => mog("755","$(j_def.jboss_user)","$(j_def.jboss_group)"),
      edit_defaults => empty,
          edit_line => fetch_and_install("$(j_def.jboss_home)","$(j_def.jboss_work_dir)","$(j_def.jboss_user)","$(j_def.jboss_group)");

  centos::

   "$(j_def.cache_dir)/jboss"
            comment => "Create an init.d script for JBOSS",
             create => "true",
              perms => mog("755","root","root"),
      edit_defaults => empty,
          edit_line => jboss_initd_centos;

   "/etc/init.d/jboss"
        comment => "Copy JBOSS init script to init.d",
      copy_from => local_cp("$(j_def.cache_dir)/jboss"),
          perms => mog("755","root","root"),
        classes => if_ok("jboss_initd_ready");

  ubuntu::

   "$(j_def.cache_dir)/jboss"
            comment => "Create an init.d script for JBOSS",
             create => "true",
              perms => mog("755","root","root"),
      edit_defaults => empty,
          edit_line => jboss_initd_ubuntu;

   "/etc/init.d/jboss"
        comment => "Copy JBOSS init script to init.d",
      copy_from => local_cp("$(j_def.cache_dir)/jboss"),
          perms => mog("755","root","root"),
        classes => if_ok("jboss_initd_ready");

  create_log_dir::

   "/opt/jboss/server/default/log/."
      comment => "Create a log directory for JBOSS",
       create => "true",
        perms => mog("755","$(j_def.jboss_user)","$(j_def.jboss_group)");

#

 packages:

  any::

   "$(jboss_pkgs)"

             comment => "Prepare JAVA environment for JBOSS",
      package_policy => "add",
      package_method => generic;

#

 processes:

  jboss_initd_ready::

   "java.*"
      restart_class => "start_jboss_service";

#

 commands:

  any.no_jboss::

   "$(j_def.jboss_home)/install_jboss_from_zip.sh"
      classes => if_ok("create_log_dir");

  start_jboss_service::

   "/etc/init.d/jboss start";
   
}

######################################################################

bundle edit_line fetch_and_install(home,dst,owner,group)
{
 insert_lines:
"#!/bin/sh
cd $(home)
wget http://garr.dl.sourceforge.net/project/jboss/JBoss/JBoss-6.0.0.M2/jboss-6.0.0.M2.zip
unzip -u jboss-6.0.0.M2.zip
rm -rf jboss-6.0.0.M2.zip
chown -R $(owner):$(group) $(home)
cd $(dst)
ln -s $(home)/jboss-6.0.0.20100216-M2/ jboss
exit 0";
}

######################################################################

bundle edit_line jboss_initd_centos
{
 insert_lines:
"#!/bin/sh

#define where jboss is - this is the directory containing directories log, bin, conf etc
JBOSS_HOME=$(const.dollar){JBOSS_HOME:-\"/opt/jboss\"}

#define the user under which jboss will run, or use 'RUNASIS' to run as the current user
JBOSS_USER=$(const.dollar){JBOSS_USER:-\"jboss\"}

#make sure java is in your path
JAVAPTH=$(const.dollar){JAVAPTH:-\"/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64\"}

#configuration to use, usually one of 'minimal', 'default', 'all'
JBOSS_CONF=$(const.dollar){JBOSS_CONF:-\"default\"}

#if JBOSS_HOST specified, use -b to bind jboss services to that address
JBOSS_HOST=\"0.0.0.0\"
JBOSS_BIND_ADDR=$(const.dollar){JBOSS_HOST:+\"-b $(const.dollar)JBOSS_HOST\"}

#define the classpath for the shutdown class
JBOSSCP=$(const.dollar){JBOSSCP:-\"$(const.dollar)JBOSS_HOME/bin/shutdown.jar:$(const.dollar)JBOSS_HOME/client/jnet.jar\"}

#define the script to use to start jboss
JBOSSSH=$(const.dollar){JBOSSSH:-\"$(const.dollar)JBOSS_HOME/bin/run.sh -c $(const.dollar)JBOSS_CONF $(const.dollar)JBOSS_BIND_ADDR\"}

if [ \"$(const.dollar)JBOSS_USER\" = \"RUNASIS\" ]; then
  SUBIT=\"\"
else
  SUBIT=\"su - $(const.dollar)JBOSS_USER -c \"
fi

if [ -n \"$(const.dollar)JBOSS_CONSOLE\" -a ! -d \"$(const.dollar)JBOSS_CONSOLE\" ]; then
  # ensure the file exists
  touch $(const.dollar)JBOSS_CONSOLE
  if [ ! -z \"$(const.dollar)SUBIT\" ]; then
    chown $(const.dollar)JBOSS_USER $(const.dollar)JBOSS_CONSOLE
  fi 
fi

if [ -n \"$(const.dollar)JBOSS_CONSOLE\" -a ! -f \"$(const.dollar)JBOSS_CONSOLE\" ]; then
  echo \"WARNING: location for saving console log invalid: $(const.dollar)JBOSS_CONSOLE\"
  echo \"WARNING: ignoring it and using /dev/null\"
  JBOSS_CONSOLE=\"/dev/null\"
fi

#define what will be done with the console log
#JBOSS_CONSOLE=$(const.dollar){JBOSS_CONSOLE:-\"/dev/null\"}
JBOSS_CONSOLE=$(const.dollar){JBOSS_CONSOLE:-\"$(const.dollar)JBOSS_HOME/server/default/log/console.log\"}

JBOSS_CMD_START=\"cd $(const.dollar)JBOSS_HOME/bin; $(const.dollar)JBOSSSH\"
JBOSS_CMD_STOP=$(const.dollar){JBOSS_CMD_STOP:-\"java -classpath $(const.dollar)JBOSSCP org.jboss.Shutdown --shutdown\"}

if [ -z \"`echo $(const.dollar)PATH | grep $(const.dollar)JAVAPTH`\" ]; then
  export PATH=$(const.dollar)PATH:$(const.dollar)JAVAPTH
fi

if [ ! -d \"$(const.dollar)JBOSS_HOME\" ]; then
  echo JBOSS_HOME does not exist as a valid directory : $(const.dollar)JBOSS_HOME
  exit 1
fi

echo JBOSS_CMD_START = $(const.dollar)JBOSS_CMD_START

case \"$(const.dollar)1\" in
start)
    cd $(const.dollar)JBOSS_HOME/bin
    if [ -z \"$(const.dollar)SUBIT\" ]; then
        eval $(const.dollar)JBOSS_CMD_START >$(const.dollar){JBOSS_CONSOLE} 2>&1 &
    else
        $(const.dollar)SUBIT \"$(const.dollar)JBOSS_CMD_START >$(const.dollar){JBOSS_CONSOLE} 2>&1 &\" 
    fi
    ;;
stop)
    if [ -z \"$(const.dollar)SUBIT\" ]; then
        $(const.dollar)JBOSS_CMD_STOP
    else
        $(const.dollar)SUBIT \"$(const.dollar)JBOSS_CMD_STOP\"
    fi 
    ;;
restart)
    $(const.dollar)0 stop
    $(const.dollar)0 start
    ;;
*)
    echo \"usage: $(const.dollar)0 (start|stop|restart|help)\"
esac";
}

######################################################################

bundle edit_line jboss_initd_ubuntu
{
 insert_lines:
"#! /bin/sh

#define where jboss is - this is the directory containing directories log, bin, conf etc
JBOSS_HOME=$(const.dollar){JBOSS_HOME:-\"/opt/jboss\"}

#define the user under which jboss will run, or use 'RUNASIS' to run as the current user
JBOSS_USER=$(const.dollar){JBOSS_USER:-\"jboss\"}

#make sure java is in your path
#this must be set even if java is in a well-known place like /usr/bin
JAVAPTH=$(const.dollar){JAVAPTH:-\"/usr/lib/jvm/java-6-openjdk\"}

#configuration to use, usually one of 'minimal', 'default', 'all'
JBOSS_CONF=$(const.dollar){JBOSS_CONF:-\"default\"}

#if JBOSS_HOST specified, use -b to bind jboss services to that address
# JBOSS_BIND_ADDR=$(const.dollar){JBOSS_HOST:+\"-b $JBOSS_HOST\"}
JBOSS_BIND_ADDR=$(const.dollar){JBOSS_HOST:-\"-b 0.0.0.0\"}

#define the script to use to start jboss
JBOSSSH=$(const.dollar){JBOSSSH:-\"$(const.dollar)JBOSS_HOME/bin/run.sh -c $(const.dollar)JBOSS_CONF $(const.dollar)JBOSS_BIND_ADDR\"}

if [ \"$(const.dollar)JBOSS_USER\" = \"RUNASIS\" ]; then
  SUBIT=\"\"
else
  SUBIT=\"su - $(const.dollar)JBOSS_USER -c \"
fi

if [ -n \"$(const.dollar)JBOSS_CONSOLE\" -a ! -d \"$(const.dollar)JBOSS_CONSOLE\" ]; then
  # ensure the file exists
  touch $(const.dollar)JBOSS_CONSOLE
  if [ ! -z \"$(const.dollar)SUBIT\" ]; then
    chown $(const.dollar)JBOSS_USER $(const.dollar)JBOSS_CONSOLE
  fi 
fi

if [ -n \"$(const.dollar)JBOSS_CONSOLE\" -a ! -f \"$(const.dollar)JBOSS_CONSOLE\" ]; then
  echo \"WARNING: location for saving console log invalid: $(const.dollar)JBOSS_CONSOLE\"
  echo \"WARNING: ignoring it and using /dev/null\"
  JBOSS_CONSOLE=\"/dev/null\"
fi

#define what will be done with the console log
#JBOSS_CONSOLE=$(const.dollar){JBOSS_CONSOLE:-\"/dev/null\"}
JBOSS_CONSOLE=$(const.dollar){JBOSS_CONSOLE:-\"$(const.dollar)JBOSS_HOME/server/default/log/console.log\"}

JBOSS_CMD_START=\"cd $(const.dollar)JBOSS_HOME/bin; $(const.dollar)JBOSSSH\"

if [ -z \"`echo $(const.dollar)PATH | grep $(const.dollar)JAVAPTH`\" ]; then
  export PATH=$(const.dollar)PATH:$(const.dollar)JAVAPTH
fi

if [ ! -d \"$(const.dollar)JBOSS_HOME\" ]; then
  echo JBOSS_HOME does not exist as a valid directory : $(const.dollar)JBOSS_HOME
  exit 1
fi

procrunning () {
   procid=0
   for procid in `pidof -x $(const.dollar)JBOSS_HOME/bin/run.sh`; do
       ps -fp $(const.dollar)procid | grep \"$(const.dollar){JBOSSSH% *}\" > /dev/null && pid=$(const.dollar)procid
   done
}

stop () {
    pid=0
    procrunning
    if [ $(const.dollar)pid = '0' ]; then
        /bin/echo -n -e \"\nNo JBossas is currently running\n\"
        exit 1
    fi

    RETVAL=1

    # If process is still running

    # First, try to kill it nicely
    for id in `ps --ppid $(const.dollar)pid | awk '{print $(const.dollar)1}' | grep -v \"^PID$(const.dollar)\"`; do
       if [ -z \"$(const.dollar)SUBIT\" ]; then
           kill -15 $(const.dollar)id
       else
           $SUBIT \"kill -15 $(const.dollar)id\"
       fi
    done

    sleep=0
    while [ $(const.dollar)sleep -lt 120 -a $(const.dollar)RETVAL -eq 1 ]; do
        /bin/echo -n -e \"\nwaiting for JBoss processes to stop\";
        sleep 10
        sleep=`expr $(const.dollar)sleep + 10`
        pid=0
        procrunning
        if [ $(const.dollar)pid = '0' ]; then
            RETVAL=0
        fi
    done

    count=0
    pid=0
    procrunning

    if [ $(const.dollar)RETVAL != 0 ] ; then
        /bin/echo -e \"\nTimeout: Shutdown command was sent, but process is still running with PID $(const.dollar)pid\"
        exit 1
    fi

    echo
    exit 0
}

case \"$(const.dollar)1\" in
start)
    cd $(const.dollar)JBOSS_HOME/bin
    if [ -z \"$(const.dollar)SUBIT\" ]; then
        eval $(const.dollar)JBOSS_CMD_START >$(const.dollar){JBOSS_CONSOLE} 2>&1 &
    else
        $(const.dollar)SUBIT \"$(const.dollar)JBOSS_CMD_START >$(const.dollar){JBOSS_CONSOLE} 2>&1 &\" 
    fi
    ;;
stop)
    stop
    ;;
restart)
    $(const.dollar)0 stop
    $(const.dollar)0 start
    ;;
*)
    echo \"usage: $(const.dollar)0 (start|stop|restart|help)\"
esac";
}