
#
# Set up the knowledge management components
#
# DO NOT EDIT THIS FILE
#

bundle agent cfengine_setup_knowledge
{
vars:

 !windows.am_policy_hub::

  "config_src"   string => "$(sys.workdir)/inputs",
                comment => "Define a path for inputs directory",
                 handle => "knowledge_vars_config_src";

  "icons"         slist => { "red", "yellow", "green", "orange" },
                comment => "List all status icons",
                 handle => "knowledge_vars_icons";

  "owner[redhat]" string => "apache",
                 comment => "Define an owner of docroot for RedHat/CentOS/Fedora",
                  handle => "knowledge_vars_owner_redhat";

  "owner[SuSE]"   string => "wwwrun",
                 comment => "Define an owner of docroot for SuSE",
                  handle => "knowledge_vars_owner_suse";

  "owner[debian]" string => "www-data",
                 comment => "Define an owner of docroot for Debian/Ubuntu",
                  handle => "knowledge_vars_owner_debian";

  "group[redhat]" string => "apache",
                 comment => "Define a group of docroot for RedHat/CentOS/Fedora",
                  handle => "knowledge_vars_group_redhat";

  "group[SuSE]"   string => "www",
                 comment => "Define a group of docroot for SuSE",
                  handle => "knowledge_vars_group_suse";

  "group[debian]" string => "www-data",
                 comment => "Define a group of docroot for Debian/Ubuntu",
                  handle => "knowledge_vars_group_debian";

 redhat::

   "flavour" string => "redhat",
            comment => "Define a linux distro for RedHat/CentOS/Fedora",
             handle => "knowledge_vars_flavour_redhat";

 debian::

   "flavour" string => "debian",
            comment => "Define a linux distro for Debian/Ubunt",
             handle => "knowledge_vars_flavour_debian";

 SuSE::

   "flavour" string => "SuSE",
            comment => "Define a linux distro for SuSE",
             handle => "knowledge_vars_flavour_suse";

#############################################################################

classes:

  #
  # check when updates arrive, new compared to the database
  #

 !windows.am_policy_hub::

   "kn_update"   or => { isnewerthan("$(config_src)","$(sys.doc_root)/db_stamp"), "Hr06.Min10_15" },
            comment => "Define a class to update knowledge map database every time policy updated",
             handle => "knowledge_classes_kn_update"; 

   "kn_init"    not => fileexists("$(sys.doc_root)/db_stamp"),
            comment => "Check for a db_stamp file",
             handle => "knowledge_classes_kn_init";

#############################################################################

files:

  kn_init::

   "$(sys.doc_root)/db_stamp"

       create => "true",
      classes => if_repaired("init_knowledge"),
      comment => "Create a time stamp file for checking for the last update",
       handle => "knowledge_files_db_stamp";

  kn_update::

   "$(sys.doc_root)/db_stamp"

        touch => "true",
      comment => "Record the time of last update",
       handle => "knowledge_files_touch_db_stamp";

  SuSE.am_policy_hub::

  "/tmp/mysql.sock"

         comment => "Create a temp link to mysql.sock",
          handle => "knowledge_files_mysql_sock_suse",
       link_from => ln_s("/var/lib/mysql/mysql.sock");

  "/var/lib/wwwrun/.cfagent/."

         comment => "Ensure permissions to .cfagent directory",
          handle => "knowledge_files_cfagent_dir_suse",
    depth_search => recurse_basedir("inf"),
           perms => mog("700","$(owner[SuSE])","$(group[SuSE])"),
          create => "true";

  debian.am_policy_hub::

  "/tmp/mysql.sock"

         comment => "Create a temp link to mysql.sock",
          handle => "knowledge_files_mysql_sock_debian",
       link_from => ln_s("/var/run/mysqld/mysqld.sock");

  "/var"

         comment => "Ensure permissions to $(sys.doc_root)",
          handle => "knowledge_files_doc_root_debian",
     file_select => folder("www"),
    depth_search => recurse("1"),
           perms => mog("755","$(owner[debian])","$(group[debian])");
	
  "/var/www/.cfagent/."

         comment => "Ensure permissions to .cfagent directory",
          handle => "knowledge_files_cfagent_dir_debian",
    depth_search => recurse_basedir("inf"),
           perms => mog("700","$(owner[debian])","$(group[debian])");
	
  redhat.am_policy_hub::

  "/tmp/mysql.sock"

         comment => "Create a temp link to mysql.sock",
          handle => "knowledge_files_mysql_sock_redhat",
       link_from => ln_s("/var/lib/mysql/mysql.sock");

  "/var"

         comment => "Ensure permissions to $(sys.doc_root)",
          handle => "knowledge_files_doc_root_redhat",
     file_select => folder("www"),
    depth_search => recurse("1"),
           perms => mog("755","$(owner[redhat])","$(group[redhat])");

  "/var/www/.cfagent/."

         comment => "Ensure permissions to .cfagent directory",
          handle => "knowledge_files_cfagent_dir_redhat",
    depth_search => recurse_basedir("inf"),
           perms => mog("700","$(owner[redhat])","$(group[redhat])");
	
  !windows.am_policy_hub::

  "$(sys.doc_root)/docs"

           comment => "Copy the basic knowledge base configuration from the installation to doc root",
            handle => "knowledge_files_doc_root_docs",
         copy_from => local_cp("$(sys.workdir)/share/doc/cfnova/KnowledgeBase"),
      depth_search => recurse("inf"),
             perms => mo("644","root"),
       file_select => knowledge_files;

  "$(sys.doc_root)"

           comment => "Copy the basic knowledge base configuration from the installation to doc root",
            handle => "knowledge_files_doc_root_1",
         copy_from => local_cp("$(sys.workdir)/share/doc/cfnova/GUI"),
      depth_search => recurse("inf");

   "$(sys.doc_root)/hub/."

           comment => "Create a necessary folder for cf-hub",
            handle => "knowledge_files_doc_root_hub",
            create => "true",
      depth_search => recurse_basedir("inf"),
             perms => mog("755","$(owner[$(flavour)])","$(group[$(flavour)])");

   "$(sys.workdir)/fonts"

           comment => "Make sure font folder has right permision",
            handle => "knowledge_files_workdir_fonts",
      depth_search => recurse_basedir("inf"),
             perms => m("644");

   "$(sys.doc_root)"

          comment => "Make sure knowledge files are accessible to webserver",
           handle => "knowledge_files_doc_root_docs_2",
            perms => mo("644","root"),
     depth_search => recurse_exclude("inf",".cfagent", "policies");

#############################################################################

commands:

  init_knowledge|(am_policy_hub.kn_update)::

    "$(sys.cf_promises) -r"

       contain => silent,
       comment => "Generate config knowledge format after update",
        handle => "knowledge_commands_cf_promise_r";

    "$(sys.cf_know) -f $(sys.doc_root)/docs/enterprise_build.cf -sg"

       comment => "Populate or update database with new knowledge",
        handle => "knowledge_commands_cf_know_sg";
}

#############################################################################

body action aggregator

{
ifelapsed => "120";
expireafter => "240";
background => "true";
}

############################################################################

body file_select knowledge_files

{
leaf_name => { ".*.cf", ".*.html", ".*.png", ".*php", ".*css" };

file_result => "leaf_name";
}

############################################################################

body file_select folder(regex)
{
 leaf_name  => { ".*$(regex)$"};
 file_result => "leaf_name";
}

############################################################################

body depth_search recurse_basedir(d)
{
 depth => "$(d)";
 include_basedir => "true";
}

############################################################################

body depth_search recurse_exclude(d,folder1,folder2)
{
 depth => "$(d)";
 exclude_dirs => { ".*$(folder1)$", "$(folder2)", "hub" , "graphs" };
}
