#########################################################################
#
#   promises.cf - Basic Policy for Enterprise version
#
#########################################################################

body common control
{
 bundlesequence => {
                    "def",
                    "environments",
                    "cfengine_management",   # See CFE_cfengine.cf
                    "service_catalogue",

#                    "cdp"
#                    "orion"
                   };

         inputs => {
                    "CFE_cfengine.cf",
                    "CFE_hub_specific.cf",
                    "CFE_knowledge.cf",
                    "update.cf",
                    "cfengine_stdlib.cf",
                    "file_change.cf",
                    "environment_$(environments.active)/promises.cf",

# Content Driven Policy - See Special Topics Guides

#                    "cdp_lib/cdp.cf",
#                    "cdp_lib/cdp_acls.cf",
#                    "cdp_lib/cdp_registry.cf",
#                    "cdp_lib/cdp_file_changes.cf",
#                    "cdp_lib/cdp_file_diffs.cf",
#                    "cdp_lib/cdp_services.cf",
#                    "cdp_lib/cdp_commands.cf",

# Orion Cloud Services - See Special Topics Guide

#                    "OrionCloud/c_cpp_env.cf",
#                    "OrionCloud/ensure_ownership.cf",
#                    "OrionCloud/jboss_server.cf",
#                    "OrionCloud/ntp.cf",
#                    "OrionCloud/ruby_env.cf",
#                    "OrionCloud/sshd_conf.cf",
#                    "OrionCloud/change_mgt.cf",
#                    "OrionCloud/fix_broken_software.cf",
#                    "OrionCloud/nagios.cf",
#                    "OrionCloud/perl_env.cf",
#                    "OrionCloud/tomcat_server.cf",
#                    "OrionCloud/db_mysql.cf",
#                    "OrionCloud/garbage_collection.cf",
#                    "OrionCloud/name_resolution.cf",
#                    "OrionCloud/php_webserver.cf",
#                    "OrionCloud/db_postgresql.cf",
#                    "OrionCloud/nginx_perlcgi.cf",
#                    "OrionCloud/varnish_method.cf",
#                    "OrionCloud/db_sqlite.cf",
#                    "OrionCloud/iptables.cf",
#                    "OrionCloud/nginx_phpcgi.cf",
#                    "OrionCloud/python_env.cf"
                   };

   version => "Promises.cf 2.2.0";

  nova_edition|constellation_edition::

   host_licenses_paid => "1";

#   goal_categories => { "goals", "targets", "milestones" };
#   goal_patterns   => { "goal_.*", "target.*","milestone.*" };

}

#########################################################################

#
# Assign your machines to available environments here.
#
# You may add and remove environments as you want, just keep the
# environment_<NAME> class defined (for GUI to sort hosts properly) and
# environments.active variable defined as it is used in the rest of promises.cf
# Note that <NAME>="any" is reserved for internal purposes.
#

bundle common environments
{
 classes:

   #
   # Classify hosts into staing environments
   # You may use any method like or, expression, classmatch, etc. to define the classes
   # Hosts do not need to be classified into an environment, but must not be in multiple
   #

   "environment_development" or => {
                                    "hostname1_example_com",
                                    "ipv4_256_256_256_256",
                                   };


   "environment_testing"     or => {
                                    "hostname2_example_com",
                                    "ipv4_256_256_257",  # subnet
                                   };


   "environment_production"  or => {
                                    "hostname3_example_com",
                                    "ipv4_256_256_258",  # subnet
                                   };

#

 vars:

   #
   # This variable holds active environment.
   #
   # * CDP reads files from inputs/environments_${active}/cdp_inputs.
   # * inputs/environments_${active}/promises.cf file is read during execution.
   #
  any::

   "active" string => "none", policy => "overridable";

  environment_development::

   "active" string => "development", policy => "overridable";

  environment_testing::

   "active" string => "testing", policy => "overridable";

  environment_production::

   "active" string => "production", policy => "overridable";

}

##################################################################
#
# service_catalogue
#  - general purposes  
#
##################################################################

bundle agent service_catalogue
{							 
 methods:

  any::

   "security"           -> { goal_1, goal_2 }
                comment => "Basic change management",
              usebundle => change_management;

  commercial_customer::

   "maintenance"           -> { goal_3 }
                   comment => "Perform log rotation and clean up of CFE Nova work files",
                 usebundle => garbage_collection;

}

##################################################################
#
# orion
#  - List of services in CFE Orion Cloud package (not in service)
#
##################################################################

bundle agent orion
{
 methods:

  nohosts::

#   "develop" usebundle => c_cpp_env;
#   "develop" usebundle => develop_perl_env;
#   "develop" usebundle => develop_python_env;
#   "develop" usebundle => develop_ruby_on_rails;

#   "app host" usebundle => app_web_phpapache;
#   "app host" usebundle => app_login_sshd;
#   "app host" usebundle => app_tomcat_server;
#   "app host" usebundle => app_varnish_method;
#   "app host" usebundle => app_db_mysql;
#   "app host" usebundle => app_db_postgresql;
#   "app host" usebundle => app_db_sqlite;
#   "app host" usebundle => app_nginx_perlcgi;
#   "app host" usebundle => app_nginx_phpcgi;
#   "app host" usebundle => app_jboss_account;

#   "any" usebundle => fix_broken_software;
#   "any" usebundle => garbage_collection;

#   "monitored" usebundle => monitoring_nagios;

#   "any" usebundle => system_ownership;
#   "any" usebundle => system_xinetd;
#   "any" usebundle => system_name_resolution;
#   "any" usebundle => system_time_ntp;
#   "any" usebundle => system_change_management;

#   "secure host" usebundle => security_access_iptables;

}

##################################################################
#
# common def
#  - common/global variables and classes here  
#
##################################################################

bundle common def
{
 vars:

  # Begin change # Your domain name, for use in access control

     "domain"  string => "example.com",
              comment => "Define a global domain for all hosts",
               handle => "common_def_vars_domain";

  # List here the IP masks that we grant access to on the server

    "acl" slist => { 
                   "$(sys.policy_hub)/16"  # Assume /16 LAN clients to start with

                 #  "2001:700:700:3.*", 
                 #  "217.77.34.18", 
                 #  "217.77.34.19",
                   },
       comment => "Define an acl for the machines to be granted accesses",
        handle => "common_def_vars_acl"; 

  # End change #

  "dir_masterfiles" string => translatepath("$(sys.workdir)/masterfiles"),
                   comment => "Define masterfiles path",
                    handle => "common_def_vars_dir_masterfiles";
  "dir_reports"     string => translatepath("$(sys.workdir)/reports"),
                   comment => "Define reports path",
                    handle => "common_def_vars_dir_reports";
  "dir_software"    string => translatepath("$(sys.workdir)/master_software_updates"),
                   comment => "Define software path",
                    handle => "common_def_vars_dir_software";

 classes:

  "commercial_customer" or => { "nova_edition", "constellation_edition" },
                   comment => "Define a global class for CFE Nova and Constellation",
                    handle => "common_def_classes_commercial_customer";

}

##################################################################
#
# control agent
#  - global control variables  
#
##################################################################

body agent control

{
# Global default for time that must elapse before promise will be rechecked.
# Don't keep any promises.

 any::

 # This should normally be set to an interval like 1-5 mins
 # We set it to one initially to avoid confusion.

  ifelapsed => "1";

 # Do not send IP/name during server connection if address resolution is broken.
 # Comment it out if you do NOT have a problem with DNS

  skipidentify => "true";

 # Environment variables based on Distro

 debian::
  environment => { 
                  "DEBIAN_FRONTEND=noninteractive",
#                  "APT_LISTBUGS_FRONTEND=none",
#                  "APT_LISTCHANGES_FRONTEND=none",
                 };

 # Switch on tracking of promise valuation

 any::

  track_value => "true";

}

#########################################################
# This part is for cf-serverd
#
# General IP access policy for the connection protocol
#  i.e. access to the server itself.
# Access to specific files must be granted in addition.
#########################################################

body server control 
{
 denybadclocks         => "false";
 allowconnects         => { "127.0.0.1" , "::1", @(def.acl) };
 allowallconnects      => { "127.0.0.1" , "::1", @(def.acl) };
 trustkeysfrom         => { "127.0.0.1" , "::1", @(def.acl) };

 skipverify            => { ".*$(def.domain)", "127.0.0.1" , "::1", @(def.acl) };

 allowusers            => { "root" };

 maxconnections        => "100";

# Uncomment the line below to allow remote users to run 
# cf-agent through cf-runagent

# cfruncommand          => "$(sys.cf_agent)";
}

#########################################################

bundle server access_rules()
{
 access:

  any::

   "$(def.dir_masterfiles)"
       handle => "server_access_grant_access_policy",
      comment => "Grant access to the policy updates",
      admit   => { ".*$(def.domain)", @(def.acl) };

  "$(def.dir_software)"
       handle => "server_access_grant_access_datafiles",
      comment => "Grant access to software updates",
      admit   => { ".*$(def.domain)", @(def.acl) };

  commercial_customer::
  
   "delta"
             handle => "server_access_grant_delta",
            comment => "Grant delta reporting query for the hub",
      resource_type => "query",
            admit   => { "$(sys.policy_hub)" };
   "full"
             handle => "server_access_grant_full",
            comment => "Grant full reporting query for the hub",
      resource_type => "query",
            admit   => { "$(sys.policy_hub)" };

# Uncomment the promise below to allow cf-runagent to
# access cf-agent on Windows machines
#	
#  "c:\program files\cfengine\bin\cf-agent.exe"
#
#    handle => "grant_access_policy_agent",
#    comment => "Grant access to the agent (for cf-runagent)",
#    admit   => { ".*$(def.domain)", @(def.acl) };	

	
 roles:

# Use roles to allow specific remote cf-runagent users to
# define certain soft-classes when running cf-agent on this host

  commercial_customer::	
#  "emergency"  authorize => { "root" };
	
}

#########################################################
# This part is for cf-execd
#
# These body settings determine the behaviour of cf-execd, 
# including scheduling times and output capture to 
# $(sys.workdir)/outputs and relay via email.
#########################################################

body executor control
{
 any::

  splaytime  => "4";
  mailto     => "cfengine@example.org";
  mailfrom   => "cfengine@$(sys.host).example.org";
  smtpserver => "localhost";

# Default:
#
# schedule => { "Min00", "Min05", "Min10", "Min15", "Min20", 
#               "Min25", "Min30", "Min35", "Min40", "Min45",
#               "Min50", "Min55" };

# The full path and command to the executable run by default (overriding builtin).
# cf-twin needs its own safe environment because of the update mechanism

 windows::
  exec_command => "$(sys.cf_twin) -f failsafe.cf && $(sys.cf_agent)";

 hpux::
  exec_command => "SHLIB_PATH=\"/var/cfengine/lib-twin\" $(sys.cf_twin) -f failsafe.cf && $(sys.cf_agent)";

 aix::
  exec_command => "LIBPATH=\"/var/cfengine/lib-twin\" $(sys.cf_twin) -f failsafe.cf && $(sys.cf_agent)";

 !(windows|hpux|aix)::
  exec_command => "LD_LIBRARY_PATH=\"/var/cfengine/lib-twin\" $(sys.cf_twin) -f failsafe.cf && $(sys.cf_agent)";

}

#########################################################

body reporter control
{
 any::

  reports => { 
             "all" 
             };

  build_directory => "$(sys.workdir)/reports";
  report_output   => "html";
  style_sheet => "/cf_enterprise.css";

}

#########################################################

body runagent control
{
# A list of hosts to contact when using cf-runagent

 any::

  hosts => { "127.0.0.1" };

# , "myhost.example.com:5308", ...

}

#########################################################

body monitor control
{
 any::
  forgetrate => "0.7";
  histograms => "true";
#  tcpdump => "false";
#  tcpdumpcommand => "/usr/sbin/tcpdump -t -n -v";

}

#########################################################
