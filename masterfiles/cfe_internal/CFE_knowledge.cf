##################################################################
#
# DO NOT EDIT THIS FILE. All policy files prefixed with CFE_ are maintained
# by CFEngine and its original state is required for internal operations of
# CFEngine. If the file has been modified CFEngineâ€™s upgrades may require 
# manual intervention. Contact CFEngine support if additional information 
# and/or recommendation is needed.
#
##################################################################
##################################################################
#
# cfengine_setup_knowledge 
#  - populate knowledge bank database (CFE Nova)
#
##################################################################

bundle agent cfengine_setup_knowledge
{
 vars:

  !windows.am_policy_hub::

   "config_src"   string => "$(sys.workdir)/inputs",
                 comment => "Define a path for inputs directory",
                  handle => "knowledge_vars_config_src";

   "icons"         slist => { "red", "yellow", "green", "orange" },
                 comment => "List all status icons",
                  handle => "knowledge_vars_icons";

   "owner[redhat]" string => "apache",
                  comment => "Define an owner of docroot for RedHat/CentOS/Fedora",
                   handle => "knowledge_vars_owner_redhat";

   "owner[SuSE]"   string => "wwwrun",
                  comment => "Define an owner of docroot for SuSE",
                   handle => "knowledge_vars_owner_suse";

   "owner[debian]" string => "www-data",
                  comment => "Define an owner of docroot for Debian/Ubuntu",
                   handle => "knowledge_vars_owner_debian";

   "group[redhat]" string => "apache",
                  comment => "Define a group of docroot for RedHat/CentOS/Fedora",
                   handle => "knowledge_vars_group_redhat";

   "group[SuSE]"   string => "www",
                  comment => "Define a group of docroot for SuSE",
                   handle => "knowledge_vars_group_suse";

   "group[debian]" string => "www-data",
                  comment => "Define a group of docroot for Debian/Ubuntu",
                   handle => "knowledge_vars_group_debian";

  redhat::

   "flavour" string => "redhat",
            comment => "Define a linux distro for RedHat/CentOS/Fedora",
             handle => "knowledge_vars_flavour_redhat";

  debian::

   "flavour" string => "debian",
            comment => "Define a linux distro for Debian/Ubunt",
             handle => "knowledge_vars_flavour_debian";

  SuSE::

   "flavour" string => "SuSE",
            comment => "Define a linux distro for SuSE",
             handle => "knowledge_vars_flavour_suse";

#

 classes:

   #
   # check when updates arrive, new compared to the database
   #

  !windows.am_policy_hub::

   "kn_update"   or => { isnewerthan("$(config_src)","$(cfengine_hub_vars.docroot)/db_stamp"), "Hr06.Min10_15" },
            comment => "Define a class to update knowledge map database every time policy updated",
             handle => "knowledge_classes_kn_update"; 

   "kn_init"    not => fileexists("$(cfengine_hub_vars.docroot)/db_stamp"),
            comment => "Check for a db_stamp file",
             handle => "knowledge_classes_kn_init";

   "mongo_init"     not => fileexists("$(cfengine_hub_vars.docroot)/mongo_stamp"),
                comment => "Check for a mongo_stamp file",
                 handle => "knowledge_classes_mongo_init";

#

 files:

  mongo_init::

   "$(cfengine_hub_vars.docroot)/mongo_stamp"
       create => "true",
      classes => if_repaired("init_mongo"),
      comment => "Create a time stamp file for 1st time installation",
       handle => "knowledge_files_mongo_stamp";     

  kn_init::

   "$(cfengine_hub_vars.docroot)/db_stamp"
       create => "true",
      classes => if_repaired("init_knowledge"),
      comment => "Create a time stamp file for checking for the last update",
       handle => "knowledge_files_db_stamp";

  kn_update::

   "$(cfengine_hub_vars.docroot)/db_stamp"
        touch => "true",
      comment => "Record the time of last update",
       handle => "knowledge_files_touch_db_stamp";

  SuSE.am_policy_hub::

#   "/tmp/mysql.sock"
#        comment => "Create a temp link to mysql.sock",
#         handle => "knowledge_files_mysql_sock_suse",
#      link_from => ln_s("/var/lib/mysql/mysql.sock");

   "/var/lib/wwwrun/.cfagent/."
           comment => "Ensure permissions to .cfagent directory",
            handle => "knowledge_files_cfagent_dir_suse",
      depth_search => recurse_basedir("inf"),
             perms => mog("700","$(owner[SuSE])","$(group[SuSE])"),
            create => "true";

  debian.am_policy_hub::

#   "/tmp/mysql.sock"
#        comment => "Create a temp link to mysql.sock",
#         handle => "knowledge_files_mysql_sock_debian",
#      link_from => ln_s("/var/run/mysqld/mysqld.sock");

   "/var"
           comment => "Ensure permissions to $(cfengine_hub_vars.docroot)",
            handle => "knowledge_files_doc_root_debian",
       file_select => folder("www"),
      depth_search => recurse("1"),
             perms => mog("755","$(owner[debian])","$(group[debian])");
	
   "/var/www/.cfagent/."
           comment => "Ensure permissions to .cfagent directory",
            handle => "knowledge_files_cfagent_dir_debian",
      depth_search => recurse_basedir("inf"),
             perms => mog("700","$(owner[debian])","$(group[debian])");
	
  redhat.am_policy_hub::

#   "/tmp/mysql.sock"
#        comment => "Create a temp link to mysql.sock",
#         handle => "knowledge_files_mysql_sock_redhat",
#      link_from => ln_s("/var/lib/mysql/mysql.sock");

   "/var"
           comment => "Ensure permissions to $(cfengine_hub_vars.docroot)",
            handle => "knowledge_files_doc_root_redhat",
       file_select => folder("www"),
      depth_search => recurse("1"),
             perms => mog("755","$(owner[redhat])","$(group[redhat])");

   "/var/www/.cfagent/."
           comment => "Ensure permissions to .cfagent directory",
            handle => "knowledge_files_cfagent_dir_redhat",
      depth_search => recurse_basedir("inf"),
             perms => mog("700","$(owner[redhat])","$(group[redhat])");
	
  !windows.am_policy_hub::

   "$(cfengine_hub_vars.docroot)/docs"
           comment => "Copy the basic knowledge base configuration from the installation to doc root",
            handle => "knowledge_files_doc_root_docs",
         copy_from => no_backup_cp("$(sys.workdir)/share/KnowledgeBase"),
      depth_search => recurse("inf"),
             perms => mo("644","root"),
       file_select => knowledge_files;

   "$(cfengine_hub_vars.docroot)"
           comment => "Copy the basic knowledge base configuration from the installation to doc root",
            handle => "knowledge_files_doc_root_1",
         copy_from => no_backup_cp("$(sys.workdir)/share/GUI"),
      depth_search => recurse("inf");

   "$(cfengine_hub_vars.docroot)/hub/."
           comment => "Create a necessary folder for cf-hub",
            handle => "knowledge_files_doc_root_hub",
            create => "true",
      depth_search => recurse_basedir("inf"),
             perms => mog("755","$(owner[$(flavour)])","$(group[$(flavour)])");

   "$(cfengine_hub_vars.docroot)/scripts/."
           comment => "Ensure permissions for $(cfengine_hub_vars.docroot)/scripts",
            handle => "knowledge_files_doc_root_scripts",
            create => "true",
      depth_search => recurse_basedir("inf"),
             perms => mog("644","$(owner[$(flavour)])","$(group[$(flavour)])");

   "$(cfengine_hub_vars.docroot)/tmp/."
           comment => "Ensure permissions for $(cfengine_hub_vars.docroot)/tmp (temp files to email)",
            handle => "knowledge_files_doc_root_tmp",
            create => "true",
      depth_search => recurse_basedir("inf"),
             perms => mog("644","$(owner[$(flavour)])","$(group[$(flavour)])");

   "$(cfengine_hub_vars.docroot)/application/logs/."
           comment => "Make sure font folder has right permision",
            handle => "knowledge_files_doc_root_application_logs",
      depth_search => recurse_basedir("inf"),
             perms => mog("644","$(owner[$(flavour)])","$(group[$(flavour)])");

   "$(cfengine_hub_vars.docroot)/docs/fonts"
           comment => "Ensure we copy font folder",
            handle => "knowledge_files_workdir_fonts",
         copy_from => local_cp("$(sys.workdir)/share/KnowledgeBase/fonts"),
      depth_search => recurse("inf"),
             perms => mo("644","root");

   "$(cfengine_hub_vars.docroot)/rest"
           comment => "Put REST api to webroot directory",
            handle => "knowledge_files_workdir_rest",
         copy_from => no_backup_cp("$(sys.workdir)/share/rest"),
      depth_search => recurse_basedir("inf"),
             perms => mo("644","root");
  
   "$(cfengine_hub_vars.docroot)/rest/.htaccess"
            comment => "Create HTACCESS file for REST",
             handle => "knowledge_files_rest_htaccess",
             create => "true",
          edit_line => rest_htaccess,
      edit_defaults => empty,
              perms => mog("644","root","root");
 
   "$(cfengine_hub_vars.docroot)"
           comment => "Make sure knowledge files are accessible to webserver",
            handle => "knowledge_files_doc_root_docs_2",
             perms => mo("644","root"),
      depth_search => recurse_exclude("inf",".cfagent", "policies");

#

 commands:

  init_mongo::

   "$(sys.workdir)/bin/mongo --quiet phpcfengine $(sys.workdir)/share/GUI/phpcfenginenova/export.js"
      contain => silent_in_dir("$(sys.workdir)"),
      comment => "Initialise mongo authentication to access Nova Mission Portal 2.1.0 ++",
       handle => "knowledge_commands_mongo_exportjs";

  init_knowledge|(am_policy_hub.kn_update)::

   "$(sys.cf_promises) -r"
      contain => silent,
      comment => "Generate config knowledge format after update",
       handle => "knowledge_commands_cf_promise_r";

   "$(sys.cf_know) -f $(cfengine_hub_vars.docroot)/docs/enterprise_build.cf -b"
      comment => "Populate or update database with new knowledge",
       handle => "knowledge_commands_cf_know_b";

}

#############################################################################

body action aggregator
{
 ifelapsed => "120";
 expireafter => "240";
 background => "true";
}

############################################################################

body file_select knowledge_files
{
 leaf_name => { ".*.cf", ".*.html", ".*.png", ".*php", ".*css" };
 file_result => "leaf_name";
}

############################################################################

body file_select folder(regex)
{
 leaf_name  => { ".*$(regex)$"};
 file_result => "leaf_name";
}

############################################################################

body depth_search recurse_basedir(d)
{
 depth => "$(d)";
 include_basedir => "true";
}

############################################################################

body depth_search recurse_exclude(d,folder1,folder2)
{
 depth => "$(d)";
 exclude_dirs => { ".*$(folder1)$", "$(folder2)", "hub" , "graphs", "scripts", "tmp", "logs" };
}

############################################################################

bundle edit_line rest_htaccess
{
 insert_lines:
  any::
"<IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteCond %{REQUEST_URI} !dispatch\.php$(const.dollar)
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule .* dispatch.php [L,QSA]
</IfModule>"
   comment => "REST's htaccess file content",
    handle => "rest_htaccess_insert_lines";
}
