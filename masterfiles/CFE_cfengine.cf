##################################################################
#
# DO NOT EDIT THIS FILE. All policy files prefixed with CFE_ are maintained
# by CFEngine and its original state is required for internal operations of
# CFEngine. If the file has been modified CFEngineâ€™s upgrades may require 
# manual intervention. Contact CFEngine support if additional information 
# and/or recommendation is needed.
#
##################################################################
##################################################################
#
# cfengine_management
#  - manage internal CFE functionalities (any:: can be modified)
#  - some agent bundles are in CFE_hub_specific.cf
#
##################################################################

bundle agent cfengine_management
{
 methods:

  #
  # CFEngine internals
  #

  am_policy_hub.commercial_customer::

   "hub" usebundle => cfengine_update_folders,
            handle => "cfengine_management_update_folders",
           comment => "Create empty directories for CFE self-upgrade";

   "hub" usebundle => cfengine_disable_selinux,
            handle => "cfengine_management_disable_selinux",
           comment => "Disable SELinux for now";

   "hub" usebundle => cfengine_policysrv,
            handle => "cfengine_management_policysrv",
           comment => "Prepare the policy hub";

   "hub" usebundle => cfengine_php_mod,
            handle => "cfengine_management_php_mod",
           comment => "Setup CFE PHP modules";

   "hub" usebundle => cfengine_web_server("on"),
            handle => "cfengine_management_web_server",
           comment => "Manage Apache Web server (on/off)";

   "hub" usebundle => cfengine_setup_knowledge,
            handle => "cfengine_management_setup_knowledge",
           comment => "Manage CFE Knowledge Map";

   "hub" usebundle => cfengine_editor,
            handle => "cfengine_management_online_editor",
           comment => "Prepare CFE online editing tool";

   "hub" usebundle => cfengine_rotate_mongod_log,
   	   handle => "cfengine_management_rotate_mongod_log",
	   comment => "Rotate the mongod log";

    "hub" usebundle => cfengine_hub_maintain,
            handle => "cfe_internal_cfengine_management_hub_maintain",
            comment => "Start the hub maintenance process";

  any::

   "any" usebundle => cfengine_correct_cftwin,
            handle => "cfengine_management_correct_cftwin",
           comment => "Ensure cf-twin in good shape";

   "any" usebundle => cfengine_limit_robot_agents,
            handle => "cfengine_management_limit_cfe_agents",
           comment => "Manage CFE processes";

}

##################################################################
#
# cfengine_limit_rebot_agents
#  - kill CFE processes and restart it when the process grown  
#
##################################################################

bundle agent cfengine_limit_robot_agents
{
 processes:

  linux::

   "cf-execd"
      process_count => check_execd("2"),
            comment => "Check cf-execd process if exceed the number",
             handle => "cfengine_limit_robot_agents_processes_check_cf_execd";

   "cf-monitord"
      process_count => check_monitord("1"),
            comment => "Check cf-monitord process if exceed the number",
             handle => "cfengine_limit_robot_agents_processes_check_cf_monitord";
   
   #
   # Do not do this for cf-hub because cf-hub may have unlimited processes
   #

  something_wrong_execd::

   "cf-execd"
            signals => { "term", "kill" },
      restart_class => "restart_execd",
            comment => "When cf-execd comes undone then kill all and restart the process",
             handle => "cfengine_limit_robot_agents_processes_kill_cf_execd";

  something_wrong_monitord::

   "cf-monitord"
            signals => { "term", "kill" },
      restart_class => "restart_monitord",
            comment => "When cf-monitord comes undone then kill all and restart the process",
             handle => "cfengine_limit_robot_agents_processes_kill_cf_monitord";

#

 commands:

  restart_execd::

   "$(sys.cf_execd)"
      comment => "Restart cf-execd process",
       handle => "cfengine_limit_robot_agents_commands_restart_cf_execd";

  restart_monitord::

   "$(sys.cf_monitord)"
      comment => "Restart cf-monitord process",
       handle => "cfengine_limit_robot_agents_commands_restart_cf_monitord";

}

#

body process_count check_execd(n)
{
match_range => "0,$(n)";
out_of_range_define => {"something_wrong_execd"};
}

body process_count check_monitord(n)
{
match_range => "0,$(n)";
out_of_range_define => {"something_wrong_monitord"};
}

##################################################################
#
# cfengine_correct_cftwin
#  - create cf-twin for self-upgrading purpose 
#
##################################################################

bundle agent cfengine_correct_cftwin
{
 files:

  !windows::

   "/var/cfengine/lib-twin"
                comment => "Correct lib-twin to be the same as lib, in case of dependency upgrade. This effect cf-twin's behaviour",
                 handle => "cfengine_correct_cftwin_files_libtwin",
                  perms => m("644"),
      move_obstructions => "true",
              copy_from => local_cp_libtwin("/var/cfengine/lib"),
           depth_search => recurse("inf");

   "/var/cfengine/bin/cf-twin"
        comment => "Correct cf-twin to be the same as cf-agent, in case of dependency upgrade",
         handle => "cfengine_correct_cftwin_files_cftwin",
          perms => m("755"),
      copy_from => local_cp("/var/cfengine/bin/cf-agent");

}

#

body copy_from local_cp_libtwin(from)
{
 source      => "$(from)";
 purge       => "true";
}

##################################################################
#
# garbage_collection
#  - do a garbage clean up. Mostly CFE Nova logs 
#
##################################################################

bundle agent garbage_collection
{
 files:

  Sunday::

   "$(sys.workdir)/cf_repair.log" 
      comment => "Rotate the promises repaired logs each week",
       handle => "garbage_collection_files_cf_repair_log",
       rename => rotate("7"),
       action => if_elapsed("10000");

   "$(sys.workdir)/cf_notkept.log" 
      comment => "Rotate the promises not kept logs each week",
       handle => "garbage_collection_files_cf_notkept_log",
       rename => rotate("7"),
       action => if_elapsed("10000");

   "$(sys.workdir)/promise_summary.log" 
      comment => "Rotate the promises not kept logs each week",
       handle => "garbage_collection_files_promise_log",
       rename => rotate("7"),
       action => if_elapsed("10000");

   "$(sys.workdir)/state/cf_value.log" 
      comment => "Rotate the promises not kept logs each week",
       handle => "garbage_collection_files_cf_value_log",
       rename => rotate("7"),
       action => if_elapsed("10000");

  any::

   "$(sys.workdir)/outputs" 
           comment => "Garbage collection of any output files",
            handle => "garbage_collection_files_tidy_outputs",
            delete => tidy,
       file_select => days_old("7"),
      depth_search => recurse("inf");

  # Other resources
!(darwin|windows)::
#   "/tmp"  # this is a symlink on Macs 
#           comment => "Garbage collection of any temporary files",
#            handle => "garbage_collection_files_tidy_tmp",
#            delete => tidy,
#       file_select => days_old("3"),
#      depth_search => recurse("inf");
  
   "/var/log/apache2/.*bz" 
          comment => "Garbage collection of rotated log files",
           handle => "garbage_collection_files_tidy_bz",
           delete => tidy,
      file_select => days_old("30");


   "/var/log/apache2/.*gz" 
          comment => "Garbage collection of rotated log files",
           handle => "garbage_collection_files_tidy_gz",
           delete => tidy,
      file_select => days_old("30");

 SuSE::

   "/var/log/zypper.log"
      comment => "Prevent the zypper log from choking the disk",
       handle => "garbage_collection_files_zypper_log",
       rename => rotate("0"),
       action => if_elapsed("10000");

}
