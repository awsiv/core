#########################################################
#
# a pre-defined template, update.cf
#
#########################################################
#########################################################
# 
# update_bins
#  - Cfengine binary update (native packages)
#
#########################################################

bundle agent update_bins
{
 vars:

   "cf_components"       slist => { "cf-key", "cf-know", "cf-monitord", "cf-promises", 
                                    "cf-report", "cf-runagent", "cf-serverd", "cf-hub", "mongod" },
                       comment => "Define cfengine robot agents",
                        handle => "update_bins_vars_cf_components";

   "master_software_location"  string => "/var/cfengine/master_software_updates",
                              comment => "The Cfengine binary updates directory on the policy host",
                               handle => "update_bins_vars_master_software_location";

   "local_software_dir"        string => translatepath("$(sys.workdir)/software_updates/$(sys.flavour)_$(sys.arch)"),
                              comment => "Local directory containing binary updates for this host",
                               handle => "update_bins_vars_local_software_dir";

  windows::

   "stop_signal"              string => "kill",
                             comment => "Define a stop signal for Windows",
                              handle => "update_bins_vars_stop_signal_windows";

  !windows::

   "stop_signal"              string => "term",
                             comment => "Define a stop signal for *NIX system",
                              handle => "update_bins_vars_stop_signal_unix";

  solarisx86|solaris::

   "novapkg"                 string => "CFEcfengine-nova",
                            comment => "Name convention of Nova package on Solaris",
                             handle => "update_bins_vars_novapkg_solaris",
                         ifvarclass => "nova_edition";

  aix::

   "novapkg"                 string => "cfengine.cfengine-nova",
                            comment => "Name convention of Nova package on AIX",
                             handle => "update_bins_vars_novapkg_aix",
                         ifvarclass => "nova_edition";
 
  !(solarisx86|solaris|aix)::

   "novapkg"                 string => "cfengine-nova",
                            comment => "Name convention of Nova package for all but not Solaris",
                             handle => "update_bins_vars_novapkg_not_solaris_aix",
                         ifvarclass => "nova_edition";

  solaris::

   "pkgarch"                 string => "sparc",
                            comment => "Name convention of package arch on Solaris",
                             handle => "update_bins_vars_pkgarch_solaris";

  solarisx86::

   "pkgarch"                 string => "i386",
                            comment => "Name convention of package arch on Solaris",
                             handle => "update_bins_vars_pkgarch_solarisx86";

  redhat.i686::

   "pkgarch"                 string => "i386",
                            comment => "Name convention of package arch on 32-bit RHEL",
                             handle => "update_bins_vars_pkgarch_redhat_32b";

  redhat.x86_64::

   "pkgarch"                 string => "$(sys.arch)",
                            comment => "Name convention of package arch on 64-bit RHEL",
                             handle => "update_bins_vars_pkgarch_redhat_64b";

  freebsd|netbsd|debian|aix::

   "pkgarch"                 string => "*",
                            comment => "Name convention of package arch on *BSD/Debian",
                             handle => "update_bins_vars_pkgarch_bsd_debian_aix";

  !(solarisx86|solaris|freebsd|netbsd|debian|aix|redhat)::

   "pkgarch"                 string => "$(sys.arch)",
                            comment => "Name convention of package arch for other system except Solaris and *BSD",
                             handle => "update_bins_vars_pkgarch_not_solaris_bsd_debian_aix_redhat_32b";

#

 processes:

  bin_newpkg::

   "$(cf_components)" signals => { "$(stop_signal)" },
                      comment => "Stop cfengine running processes before binary update",
                       handle => "update_bins_processes_stop_cfengine",
                      classes => u_if_repaired("stopped_cfprocs");

  bin_newpkg.!windows::

   "cf-execd"  signals => { "$(stop_signal)" },
               comment => "Stop cf-execd running process before binary update",
                handle => "update_bins_processes_stop_cf_execd",
               classes => u_if_repaired("stopped_cfprocs");

#

 packages:

  # update packages after all Cfengine have been killed

  stopped_cfprocs::

   "$(novapkg)"
                    comment => "Update Nova package to a newer version",
                     handle => "update_bins_packages_nova_update_all",
             package_policy => "update",
             package_select => ">=",            # picks the newest Nova available
      package_architectures => { "$(pkgarch)" },
            package_version => "9.9.9",         # Install new Nova anyway
             package_method => u_generic( "$(local_software_dir)" ),
                 ifvarclass => "nova_edition",
                    classes => u_if_else("bin_update_success", "bin_update_fail");

#

 files:

  !am_policy_hub::

  "$(local_software_dir)"
          comment => "Copy binary updates from master source on policy server",
           handle => "update_bins_files_pkg_copy",
        copy_from => u_rcp("$(master_software_location)/$(sys.flavour)_$(sys.arch)","$(sys.policy_hub)"),
     depth_search => u_recurse("1"),  # Nova updates should be in root dir
       depends_on => { "grant_access_datafiles" },
           action => u_immediate,
          classes => u_if_repaired("bin_newpkg");

#

 services:

  bin_newpkg.windows::

   "CfengineNovaExec"
      service_policy => "stop",
             comment => "Stop the executor windows service before updating Cfengine",
              handle => "update_bins_services_stop_cf_execd_windows",
               classes => u_if_repaired("stopped_cfprocs");

#

 reports:

  bin_newpkg::

   "An update for Cfengine binaries is downloaded, installing..."
      comment => "Alert a message during installation",
       handle => "update_bins_reports_installation";

  bin_update_success::

   "Successfully installed Cfengine binaries"
      comment => "Alert a message when an update finishes",
       handle => "update_bins_reports_finish";

  bin_update_fail::

   "Failed updating Cfengine binaries, should revert to old version"
      comment => "Alert a message if an update failed",
       handle => "update_bins_reports_fail";

}

#########################################################
# 
# update
# - Cfengine policy update (masterfiles -> inputs)
#
#########################################################

bundle agent update
{
 vars:

   "inputs_dir"         string => translatepath("$(sys.workdir)/inputs"),
                       comment => "Directory containing Cfengine policies",
                        handle => "update_vars_inputs_dir";

   "ppkeys_file"        string => translatepath("$(sys.workdir)/ppkeys/localhost.pub"),
                       comment => "Path to public key file",
                        handle => "update_vars_ppkeys_file";

   "file_check"         string => translatepath("$(inputs_dir)/promises.cf"),
                       comment => "Path to a policy file",
                        handle => "update_vars_file_check";

   "master_location"    string => "/var/cfengine/masterfiles",  # NB! NOT $(sys.workdir) on Windows !
                       comment => "The master cfengine policy directory on the policy host",
                        handle => "update_vars_master_location";

#

 classes:

   "have_ppkeys"   expression => fileexists("$(ppkeys_file)"),
                      comment => "Check for /var/cfengine/ppkeys/localhost.pub",
                       handle => "update_classes_have_ppkeys";

   "files_ok"      expression => fileexists("$(file_check)"),
                      comment => "Check for /var/cfengine/masterfiles/promises.cf",
                       handle => "update_classes_files_ok";

#

 processes:

  am_policy_hub::
  
   "mongod"      restart_class => "start_mongod",
                       comment => "Monitor mongodb process",
                        handle => "update_processes_mongod",
                    ifvarclass => "nova_edition|constellation_edition";

  files_ok::

   "cf-serverd"  restart_class => "start_server",
                       comment => "Monitor cf-serverd process",
                        handle => "update_processes_cf_serverd";

   "cf-monitord" restart_class => "start_monitor",
                       comment => "Monitor cf-monitord process",
                        handle => "update_processes_cf_monitord";

  files_ok.!windows::

   "cf-execd"    restart_class => "start_exec",
                       comment => "Monitor cf-execd process",
                        handle => "update_processes_cf_execd";

  am_policy_hub.files_ok.!windows::

   "cf-hub"      restart_class => "start_hub",
                       comment => "Monitor cf-hub process",
                        handle => "update_processes_cf_hub",
                    ifvarclass => "nova_edition|constellation_edition";

  !am_policy_hub.files_ok.!windows::

   "cf-hub"            signals => { "term", "kill" },
                       comment => "Kill cf-hub process on all client hosts",
                        handle => "update_processes_kill_cf_hub_on_clients",
                    ifvarclass => "nova_edition|constellation_edition";

  update_report.!windows::

   "cf-monitord"       signals => { "term", "kill" },
                 restart_class => "restart_monitor",
                        handle => "update_processes_kill_cf_monitord",
                       classes => u_if_repaired_then_cancel("update_report"),
                    ifvarclass => "nova_edition|constellation_edition";

#

 commands:

  start_server::

   "$(sys.cf_serverd)"
       action => u_ifwin_bg,
      comment => "Start cf-serverd process",
       handle => "update_commands_start_cf_serverd";

  start_monitor|restart_monitor::

   "$(sys.cf_monitord)"
       action => u_ifwin_bg,
      comment => "Start cf-monitord process",
       handle => "update_commands_start_cf_monitord";

  !windows.start_exec::

   "$(sys.cf_execd)"
      comment => "Start cf-execd process",
       handle => "update_commands_start_cf_execd_not_windows";

  !windows.am_policy_hub.start_hub::

   "$(sys.cf_hub)"
      comment => "Start cf-hub process",
       handle => "update_commands_start_cf_hub";

  !windows.am_policy_hub.start_mongod::

   "/var/cfengine/bin/mongod --fork --logpath /var/log/mongod.log --logappend --dbpath $(sys.workdir)/state --bind_ip 127.0.0.1 --nohttpinterface --nojournal > /dev/null < /dev/null 2>&1"
      contain => u_in_shell,
       action => u_mongod_bg,
      comment => "Start mongod process",
       handle => "update_commands_start_mongod";

  !have_ppkeys::

   "$(sys.cf_key)",
      comment => "Generate cfengine encryption keys if necessary",
       handle => "update_commands_generate_keys";

  am_policy_hub.update_report::

   "$(sys.cf_promises) -r"
      contain => u_in_shell_and_silent,
      comment => "Generate config knowledge format after update",
       handle => "update_commands_run_cf_promises_r";

#

 services:

  files_ok.windows::
 
   "CfengineNovaExec"
      service_policy => "start",
      service_method => u_bootstart,
             comment => "Start the executor windows service now and at boot time",
              handle => "update_services_windows_executor";

#

 files:

  !am_policy_hub::  # policy hub should not alter inputs/ uneccessary

   "$(inputs_dir)/cf_promises_validated"
        comment => "Check whether a validation stamp is available for a new policy update to reduce the distributed load",
         handle => "check_valid_update",
      copy_from => u_rcp("$(master_location)/cf_promises_validated","$(sys.policy_hub)"),
         action => u_immediate,
        classes => u_if_repaired("validated_updates_ready");

  am_policy_hub|validated_updates_ready::  # policy hub should always put masterfiles in inputs in order to check new policy

   "$(inputs_dir)"
           comment => "Copy policy updates from master source on policy server if a new validation was acquired",
            handle => "update_files_inputs_dir",
         copy_from => u_rcp("$(master_location)","$(sys.policy_hub)"),
      depth_search => u_recurse("inf"),
      file_select  => u_input_files,
        depends_on => { "grant_access_policy", "check_valid_update" },
            action => u_immediate,
           classes => u_if_repaired("update_report");

  !windows::

   "$(sys.workdir)/bin"
           comment => "Make sure cfengine binaries have right file permissions",
            handle => "update_files_sys_workdir_bin",
             perms => u_m("755"),
      depth_search => u_recurse_basedir("inf"),
            action => u_immediate;

   "$(sys.workdir)/lib"
           comment => "Make sure cfengine libraries have right file permissions",
            handle => "update_files_sys_workdir_lib",
             perms => u_m("644"),
      depth_search => u_recurse_basedir("inf"),
            action => u_immediate;

   "/usr/local/sbin"
           comment => "Ensure cfengine binaries were copied to /usr/local/sbin",
            handle => "update_files_usr_local_sbin",
             perms => u_m("755"),
         copy_from => u_cp_nobck("$(sys.workdir)/bin"),
       file_select => u_cf3_files,
      depth_search => u_recurse("1"),
          action => u_immediate;

  am_policy_hub::

   "$(master_location)/."
           comment => "Make sure masterfiles folder has right file permissions",
            handle => "update_files_sys_workdir_masterfiles",
             perms => u_m("644"),
      depth_search => u_recurse_basedir("inf"),
            action => u_immediate;

}

#########################################################
# Self-contained bodies from the lib to avoid dependencies
#########################################################

body perms u_m(p)
{
 mode  => "$(p)";
}

#########################################################

body file_select u_cf3_files
{
 leaf_name => { "cf-.*" };
 file_result => "leaf_name";
}

#########################################################

body file_select u_input_files
{
 leaf_name => { ".*.cf",".*.dat",".*.txt" };
 file_result => "leaf_name";
}

#########################################################

body copy_from u_rcp(from,server)
{
 source      => "$(from)";
 compare     => "digest";
 trustkey    => "false";

!am_policy_hub::

 servers => { "$(server)" };
}

#########################################################

body copy_from u_cp(from)
{
 source  => "$(from)";
 compare => "digest";
}

#########################################################

body copy_from u_cp_nobck(from)
{
 source      => "$(from)";
 compare     => "digest";
 copy_backup => "false";
}

#########################################################

body action u_immediate
{
 ifelapsed => "0";
}

#########################################################

body depth_search u_recurse(d)
{
 depth => "$(d)";
 exclude_dirs => { "\.svn", "\.git" };
}

#########################################################

body depth_search u_recurse_basedir(d)
{
 include_basedir => "true";
 depth => "$(d)";
 exclude_dirs => { "\.svn", "\.git" };
}

#########################################################

body classes u_if_repaired(x)
{
 promise_repaired => { "$(x)" };
}

#########################################################

body classes u_if_repaired_then_cancel(y)
{
 cancel_repaired => { "$(y)" };
}

#########################################################

body classes u_if_else(yes,no)
{
 promise_kept     => { "$(yes)" };
 promise_repaired => { "$(yes)" };
 repair_failed    => { "$(no)" };
 repair_denied    => { "$(no)" };
 repair_timeout   => { "$(no)" };
}

#########################################################

body contain u_in_shell
{
 useshell => "true";
}

#########################################################

body contain u_in_shell_and_silent
{
 useshell => "true";
 no_output => "true";
}

#########################################################

body action u_ifwin_bg
{
windows::
 background => "true";
}

#########################################################

body action u_mongod_bg
{
 background => "true";
}

#########################################################

body service_method u_bootstart
{
 service_autostart_policy => "boot_time";
}

#########################################################

body contain u_silent_in_dir(s)
{
 chdir => "$(s)";
 no_output => "true";
}

#########################################################

body package_method u_generic(repo)
{

debian::

 package_changes => "individual";
 package_list_command => "/usr/bin/dpkg -l";

 package_list_update_ifelapsed => "0";  # avoid caching of list during upgrade

 package_list_name_regex    => "ii\s+([^\s]+).*";
 package_list_version_regex => "ii\s+[^\s]+\s+([^\s]+).*";

 package_installed_regex    => ".*"; # all reported are installed

 package_file_repositories  => { "$(repo)" };

debian.x86_64::
 package_name_convention    => "$(name)_$(version)_x86_64.deb";

debian.i686::
 package_name_convention    => "$(name)_$(version)_i686.deb";

debian::
 package_add_command        => "/usr/bin/dpkg --install";
 package_delete_command     => "/usr/bin/dpkg --purge";
 package_update_command     => "/usr/bin/dpkg --install";


redhat|SuSE::

 package_changes => "individual";

 package_list_command => "/bin/rpm -qa --queryformat \"i | repos | %{name} | %{version}-%{release} | %{arch}\n\"";

 package_list_update_ifelapsed => "0";  # avoid caching of list during upgrade

 package_list_name_regex    => "[^|]+\|[^|]+\|\s+([^\s|]+).*";
 package_list_version_regex => "[^|]+\|[^|]+\|[^|]+\|\s+([^\s|]+).*";
 package_list_arch_regex    => "[^|]+\|[^|]+\|[^|]+\|[^|]+\|\s+([^\s]+).*";

 package_installed_regex    => "i.*";

 package_file_repositories  => { "$(repo)" };

 package_name_convention    => "$(name)-$(version).$(arch).rpm";

 package_add_command        => "/bin/rpm -ivh ";
 package_delete_command     => "/bin/rpm -e --nodeps";
 package_verify_command     => "/bin/rpm -V";
 package_update_command     => "/bin/rpm -Uvh ";
 package_noverify_regex     => ".*[^\s].*";


windows::

 package_changes => "individual";
 package_list_update_ifelapsed => "0";  # avoid caching of list during upgrade
 package_file_repositories  => { "$(repo)" };

 package_installed_regex    => ".*";
 
 package_name_convention    => "$(name)-$(version)-$(arch).msi";

 package_add_command        => "\"$(sys.winsysdir)\msiexec.exe\" /qn /i";
 package_update_command     => "\"$(sys.winsysdir)\msiexec.exe\" /qn /i";
 package_delete_command     => "\"$(sys.winsysdir)\msiexec.exe\" /qn /x";


freebsd::

 package_changes => "individual";

 package_list_command => "/usr/sbin/pkg_info";
 package_list_update_ifelapsed => "0";  # avoid caching of list during upgrade


 package_list_name_regex    => "^(\S+)-(\d+\.?)+";
 package_list_version_regex => "^\S+-((\d+\.?)+\_\d)";

 package_file_repositories  => { "$(repo)" };

 package_installed_regex    => ".*";

 package_name_convention    => "$(name)-$(version).tbz";
 package_delete_convention  => "$(name)-$(version)";

 package_add_command        => "/usr/sbin/pkg_add";
 package_delete_command     => "/usr/sbin/pkg_delete";

netbsd::

 package_changes => "individual";

 package_list_command => "/usr/sbin/pkg_info";
 package_list_update_ifelapsed => "0"; # avoid caching of list during upgrade


 package_list_name_regex    => "^(\S+)-(\d+\.?)+";
 package_list_version_regex => "^\S+-((\d+\.?)+\nb\d)";

 package_file_repositories  => { "$(repo)" };

 package_installed_regex    => ".*";

 package_name_convention    => "$(name)-$(version).tgz";
 package_delete_convention  => "$(name)-$(version)";

 package_add_command        => "/usr/sbin/pkg_add";
 package_delete_command     => "/usr/sbin/pkg_delete";

solarisx86|solaris::
 
 package_changes => "individual";
 package_list_command => "/usr/bin/pkginfo -l";
 package_list_update_ifelapsed => "0";  # avoid caching of list during upgrade
 package_multiline_start    => "\s*PKGINST:\s+[^\s]+";
 package_list_name_regex    => "\s*PKGINST:\s+([^\s]+)";
 package_list_version_regex => "\s*VERSION:\s+([^\s]+)";
 package_list_arch_regex    => "\s*ARCH:\s+([^\s]+)";
 
 package_file_repositories  => { "$(repo)" };
 
 package_installed_regex    => "\s*STATUS:\s*(completely|partially)\s+installed.*";
 package_name_convention    => "$(name)-$(version)-$(arch).pkg";
 package_delete_convention  => "$(name)";

 # Cfengine appends path to package and package name below, respectively
 package_add_command        => "/bin/sh $(repo)/add_scr $(repo)/admin_file";
 package_delete_command     => "/usr/sbin/pkgrm -n -a $(repo)/admin_file";

aix::

 package_changes => "individual";

 package_list_update_ifelapsed => "0";  # avoid caching of list during upgrade

 package_list_command       => "/usr/bin/lslpp -lc";
 package_list_name_regex    => "[^:]+:([^:]+):[^:]+:.*";
 package_list_version_regex => "[^:]+:[^:]+:([^:]+):.*";

 package_file_repositories  => { "$(repo)" };

 package_installed_regex    => "[^:]+:[^:]+:[^:]+:[^:]*:(COMMITTED|APPLIED):.*";

 package_name_convention    => "$(name)-$(version).bff";
 package_delete_convention  => "$(name)";

 package_add_command        => "/usr/bin/rm -f $(repo)/.toc && /usr/sbin/geninstall -IqacgXNY -d $(repo) cfengine.cfengine-nova$";
 package_update_command     => "/usr/bin/rm -f $(repo)/.toc && /usr/sbin/geninstall -IqacgXNY -d $(repo) cfengine.cfengine-nova$";

# package_add_command        => "/bin/sh -c /usr/sbin/inutoc $(repo) && /usr/sbin/installp -qacgXNYd $(repo) cfengine.cfengine-nova$";
# package_update_command     => "/bin/sh -c /usr/sbin/inutoc $(repo) && /usr/sbin/installp -qacgXNYd $(repo) cfengine.cfengine-nova$";

 package_delete_command     => "/usr/sbin/installp -ug cfengine.cfengine-nova$";

}
