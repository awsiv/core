##################################################################
#
# CFE internal services
#
# Do not edit this file
#
##################################################################
##################################################################
#
# cfengine_php_mod 
#  - setup php modules (CFE Nova)
#
##################################################################

bundle agent cfengine_php_mod
{
 files:

  redhat_5|centos_5::

   "/etc/php.d/cfmod.ini"
        comment => "Put cfmod.ini to its place",
         handle => "cfengine_php_mod_cfmod_ini_redhat5",
      copy_from => local_cp("$(sys.workdir)/software_updates/cfmod/cfmod.ini"),
          perms => mo("644","root");

   "/etc/php.d/svn.ini"
        comment => "Put svn.ini to its place",
         handle => "cfengine_php_mod_svn_ini_redhat5",
      copy_from => local_cp("$(sys.workdir)/software_updates/svn/svn.ini"),
          perms => mo("644","root");

   "/etc/php.d/json.ini"
        comment => "Put json.ini to its place",
         handle => "cfengine_php_mod_json_ini_redhat5",
      copy_from => local_cp("$(sys.workdir)/software_updates/json/json.ini"),
          perms => mo("644","root");

   "/etc/php.d/mongo.ini"
        comment => "Put mongo.ini to its place",
         handle => "cfengine_php_mod_mongo_ini_redhat5",
      copy_from => local_cp("$(sys.workdir)/software_updates/mongo/mongo.ini"),
          perms => mo("644","root");

   "/usr/lib/php/modules/json.so"
         comment => "Prepare cfmod.so for 32-bit system",
         handle => "cfengine_php_mod_json_so_redhat5_32",
       copy_from => local_cp("$(sys.workdir)/software_updates/json/32/json.so"),
           perms => mo("755","root"),
      ifvarclass => "i686";

   "/usr/lib64/php/modules/json.so"
         comment => "Prepare cfmod.so for 64-bit system",
         handle => "cfengine_php_mod_json_so_redhat5_64",
       copy_from => local_cp("$(sys.workdir)/software_updates/json/64/json.so"),
           perms => mo("755","root"),
      ifvarclass => "x86_64";

   "/usr/lib/php/modules/cfmod.so"
         comment => "Prepare cfmod.so for 32-bit system",
         handle => "cfengine_php_mod_cfmod_so_redhat5_32",
       copy_from => local_cp("$(sys.workdir)/software_updates/cfmod/32/cfmod.so"),
           perms => mo("755","root"),
      ifvarclass => "i686",
        classes => if_repaired("restart_webserver");

   "/usr/lib64/php/modules/cfmod.so"
         comment => "Prepare cfmod.so for 64-bit system",
         handle => "cfengine_php_mod_cfmod_so_redhat5_64",
       copy_from => local_cp("$(sys.workdir)/software_updates/cfmod/64/cfmod.so"),
           perms => mo("755","root"),
      ifvarclass => "x86_64",
        classes => if_repaired("restart_webserver");

   "/usr/lib/php/modules/svn.so"
         comment => "Prepare svn.so for 32-bit system",
         handle => "cfengine_php_mod_svn_so_redhat5_32",
       copy_from => local_cp("$(sys.workdir)/software_updates/svn/32/svn.so"),
           perms => mo("755","root"),
      ifvarclass => "i686",
        classes => if_repaired("restart_webserver");

   "/usr/lib64/php/modules/svn.so"
         comment => "Prepare svn.so for 64-bit system",
         handle => "cfengine_php_mod_svn_so_redhat5_64",
       copy_from => local_cp("$(sys.workdir)/software_updates/svn/64/svn.so"),
           perms => mo("755","root"),
      ifvarclass => "x86_64",
        classes => if_repaired("restart_webserver");

  redhat_5::

   "/etc/php.d/mcrypt.ini"
        comment => "Put mcrypt.ini to its place",
         handle => "cfengine_php_mod_mcrypt_ini_redhat5",
      copy_from => local_cp("$(sys.workdir)/software_updates/mcrypt/mcrypt.ini"),
          perms => mo("644","root");

   "/usr/lib/php/modules/mcrypt.so"
         comment => "Prepare mcrypt.so for 32-bit system",
         handle => "cfengine_php_mod_mcrypt_so_redhat5_32",
       copy_from => local_cp("$(sys.workdir)/software_updates/mcrypt/32/mcrypt.so"),
           perms => mo("755","root"),
      ifvarclass => "i686",
        classes => if_repaired("restart_webserver");

   "/usr/lib64/php/modules/mcrypt.so"
         comment => "Prepare mcrypt.so for 64-bit system",
         handle => "cfengine_php_mod_mcrypt_so_redhat5_64",
       copy_from => local_cp("$(sys.workdir)/software_updates/mcrypt/64/mcrypt.so"),
           perms => mo("755","root"),
      ifvarclass => "x86_64",
        classes => if_repaired("restart_webserver");

  redhat_4::

   "/etc/php.d/cfmod.ini"
        comment => "Put cfmod.ini to its place",
         handle => "cfengine_php_mod_cfmod_ini_redhat4",
      copy_from => local_cp("$(sys.workdir)/software_updates/cfmod/cfmod.ini"),
          perms => mo("644","root");

#   "/etc/php.d/svn.ini"
#        comment => "Put svn.ini to its place",
#      copy_from => local_cp("$(sys.workdir)/software_updates/svn/svn.ini"),
#          perms => mo("644","root");

   "/etc/php.d/json.ini"
        comment => "Put json.ini to its place",
         handle => "cfengine_php_mod_json_ini_redhat4",
      copy_from => local_cp("$(sys.workdir)/software_updates/json/json.ini"),
          perms => mo("644","root");

   "/etc/php.d/mongo.ini"
        comment => "Put mongo.ini to its place",
         handle => "cfengine_php_mod_mongo_ini_redhat4",
      copy_from => local_cp("$(sys.workdir)/software_updates/mongo/mongo.ini"),
          perms => mo("644","root");

   "/usr/lib/php4/json.so"
         comment => "Prepare cfmod.so for 32-bit system",
          handle => "cfengine_php_mod_json_so_redhat4_32",
       copy_from => local_cp("$(sys.workdir)/software_updates/json/32/json.so"),
           perms => mo("755","root"),
      ifvarclass => "i686";

   "/usr/lib/php4/cfmod.so"
         comment => "Prepare cfmod.so for 32-bit system",
          handle => "cfengine_php_mod_cfmod_so_redhat4_32",
       copy_from => local_cp("$(sys.workdir)/software_updates/cfmod/32/cfmod.so"),
           perms => mo("755","root"),
      ifvarclass => "i686",
        classes => if_repaired("restart_webserver");

#   "/usr/lib/php4/svn.so"
#         comment => "Prepare svn.so for 32-bit system",
#       copy_from => local_cp("$(sys.workdir)/software_updates/svn/32/svn.so"),
#           perms => mo("755","root"),
#      ifvarclass => "i686",
#        classes => if_repaired("restart_webserver");

   "/usr/lib64/php4/json.so"
         comment => "Prepare cfmod.so for 64-bit system",
          handle => "cfengine_php_mod_json_so_redhat4_64",
       copy_from => local_cp("$(sys.workdir)/software_updates/json/64/json.so"),
           perms => mo("755","root"),
      ifvarclass => "x86_64";

   "/usr/lib64/php4/cfmod.so"
         comment => "Prepare cfmod.so for 64-bit system",
          handle => "cfengine_php_mod_cfmod_so_redhat4_64",
       copy_from => local_cp("$(sys.workdir)/software_updates/cfmod/64/cfmod.so"),
           perms => mo("755","root"),
      ifvarclass => "x86_64",
        classes => if_repaired("restart_webserver");

#   "/usr/lib64/php4/svn.so"
#         comment => "Prepare svn.so for 64-bit system",
#       copy_from => local_cp("$(sys.workdir)/software_updates/svn/64/svn.so"),
#           perms => mo("755","root"),
#      ifvarclass => "x86_64",
#        classes => if_repaired("restart_webserver");

  ubuntu_10|debian_squeeze_i386|debian_squeeze_amd64|debian_6::

   "/etc/php5/conf.d/cfmod.ini"
        comment => "Put cfmod.ini to its place",
         handle => "cfengine_php_mod_cfmod_ini_ubuntu10",
      copy_from => local_cp("$(sys.workdir)/software_updates/cfmod/cfmod.ini"),
          perms => mo("644","root");

   "/etc/php5/conf.d/svn.ini"
        comment => "Put cfmod.ini to its place",
         handle => "cfengine_php_mod_svn_ini_ubuntu10",
      copy_from => local_cp("$(sys.workdir)/software_updates/svn/svn.ini"),
          perms => mo("644","root");

   "/usr/lib/php5/20090626+lfs/cfmod.so"
         comment => "Prepare cfmod.so for 32-bit system",
          handle => "cfengine_php_mod_cfmod_so_ubuntu10_32",
       copy_from => local_cp("$(sys.workdir)/software_updates/cfmod/20090626/32/cfmod.so"),
           perms => mo("755","root"),
      ifvarclass => "i686",
         classes => if_repaired("restart_webserver");
 
   "/usr/lib/php5/20090626+lfs/svn.so"
         comment => "Prepare svn.so for 32-bit system",
          handle => "cfengine_php_mod_svn_so_ubuntu10_32",
       copy_from => local_cp("$(sys.workdir)/software_updates/svn/20090626/32/svn.so"),
           perms => mo("755","root"),
      ifvarclass => "i686",
         classes => if_repaired("restart_webserver");

   "/usr/lib/php5/20090626/cfmod.so"
         comment => "Prepare cfmod.so for 64-bit system",
          handle => "cfengine_php_mod_cfmod_so_ubuntu10_64",
       copy_from => local_cp("$(sys.workdir)/software_updates/cfmod/20090626/64/cfmod.so"),
           perms => mo("755","root"),
      ifvarclass => "x86_64",
         classes => if_repaired("restart_webserver");
  
   "/usr/lib/php5/20090626/svn.so"
         comment => "Prepare svn.so for 64-bit system",
          handle => "cfengine_php_mod_svn_so_ubuntu10_64",
       copy_from => local_cp("$(sys.workdir)/software_updates/svn/20090626/64/svn.so"),
           perms => mo("755","root"),
      ifvarclass => "x86_64",
         classes => if_repaired("restart_webserver");

  ubuntu_8|debian_5|ubuntu_9::

   "/etc/php5/conf.d/cfmod.ini"
        comment => "Put cfmod.ini to its place",
         handle => "cfengine_php_mod_cfmod_ini_ubuntu8",
      copy_from => local_cp("$(sys.workdir)/software_updates/cfmod/cfmod.ini"),
          perms => mo("644","root");

   "/etc/php5/conf.d/svn.ini"
        comment => "Put cfmod.ini to its place",
         handle => "cfengine_php_mod_svn_ini_ubuntu8",
      copy_from => local_cp("$(sys.workdir)/software_updates/svn/svn.ini"),
          perms => mo("644","root");

   "/etc/php5/conf.d/mongo.ini"
        comment => "Put mongo.ini to its place",
         handle => "cfengine_php_mod_mongo_ini_ubuntu8",
      copy_from => local_cp("$(sys.workdir)/software_updates/mongo/mongo.ini"),
          perms => mo("644","root");

   "/usr/lib/php5/20060613+lfs/cfmod.so"
         comment => "Prepare cfmod.so for 32-bit system",
          handle => "cfengine_php_mod_cfmod_so_ubuntu8_32",
       copy_from => local_cp("$(sys.workdir)/software_updates/cfmod/20060613/32/cfmod.so"),
           perms => mo("755","root"),
      ifvarclass => "i686",
         classes => if_repaired("restart_webserver");
 
   "/usr/lib/php5/20060613+lfs/svn.so"
         comment => "Prepare svn.so for 32-bit system",
          handle => "cfengine_php_mod_svn_so_ubuntu8_32",
       copy_from => local_cp("$(sys.workdir)/software_updates/svn/20060613/32/svn.so"),
           perms => mo("755","root"),
      ifvarclass => "i686",
         classes => if_repaired("restart_webserver");

   "/usr/lib/php5/20060613/cfmod.so"
         comment => "Prepare cfmod.so for 64-bit system",
          handle => "cfengine_php_mod_cfmod_so_ubuntu8_64",
       copy_from => local_cp("$(sys.workdir)/software_updates/cfmod/20060613/64/cfmod.so"),
           perms => mo("755","root"),
      ifvarclass => "x86_64",
         classes => if_repaired("restart_webserver");
  
   "/usr/lib/php5/20060613/svn.so"
         comment => "Prepare svn.so for 64-bit system",
          handle => "cfengine_php_mod_svn_so_ubuntu8_64",
       copy_from => local_cp("$(sys.workdir)/software_updates/svn/20060613/64/svn.so"),
           perms => mo("755","root"),
      ifvarclass => "x86_64",
         classes => if_repaired("restart_webserver");

  SuSE_11|suse_11::

   "/etc/php5/conf.d/cfmod.ini"
        comment => "Put cfmod.ini to its place",
         handle => "cfengine_php_mod_cfmod_ini_suse",
      copy_from => local_cp("$(sys.workdir)/software_updates/cfmod/cfmod.ini"),
          perms => mo("644","root");

   "/etc/php5/conf.d/svn.ini"
        comment => "Put svn.ini to its place",
         handle => "cfengine_php_mod_svn_ini_suse",
      copy_from => local_cp("$(sys.workdir)/software_updates/svn/svn.ini"),
          perms => mo("644","root");

   "/etc/php5/conf.d/mongo.ini"
        comment => "Put mongo.ini to its place",
         handle => "cfengine_php_mod_mongo_ini_suse",
      copy_from => local_cp("$(sys.workdir)/software_updates/mongo/mongo.ini"),
          perms => mo("644","root");

   "/usr/lib/php5/extensions/cfmod.so"
         comment => "Prepare cfmod.so for 32-bit system",
          handle => "cfengine_php_mod_cfmod_so_suse_32",
       copy_from => local_cp("$(sys.workdir)/software_updates/cfmod/32/cfmod.so"),
           perms => mo("755","root"),
      ifvarclass => "i686",
         classes => if_repaired("restart_webserver");

   "/usr/lib/php5/extensions/svn.so"
         comment => "Prepare svn.so for 32-bit system",
          handle => "cfengine_php_mod_svn_so_suse_32",
       copy_from => local_cp("$(sys.workdir)/software_updates/svn/32/svn.so"),
           perms => mo("755","root"),
      ifvarclass => "i686",
         classes => if_repaired("restart_webserver");

   "/usr/lib64/php5/extensions/cfmod.so"
         comment => "Prepare cfmod.so for 64-bit system",
          handle => "cfengine_php_mod_cfmod_so_suse_64",
       copy_from => local_cp("$(sys.workdir)/software_updates/cfmod/64/cfmod.so"),
           perms => mo("755","root"),
      ifvarclass => "x86_64",
         classes => if_repaired("restart_webserver");

   "/usr/lib64/php5/extensions/svn.so"
         comment => "Prepare svn.so for 64-bit system",
          handle => "cfengine_php_mod_svn_so_suse_64",
       copy_from => local_cp("$(sys.workdir)/software_updates/svn/64/svn.so"),
           perms => mo("755","root"),
      ifvarclass => "x86_64",
         classes => if_repaired("restart_webserver");

#

 commands:

  restart_webserver.redhat::

   "/etc/init.d/httpd restart"
      comment => "Restart httpd service on RedHat/CentOS/Fedora",
       handle => "cfengine_php_mod_commands_httpd_redhat";

  restart_webserver.debian::

   "/etc/init.d/apache2 restart"
      comment => "Restart apache2 service on Debian/Ubuntu",
       handle => "cfengine_php_mod_commands_apache2_debian";

  restart_webserver.SuSE::

   "/etc/init.d/apache2 restart"
      comment => "Restart apache2 service on SuSE",
       handle => "cfengine_php_mod_commands_apache2_suse";

}

##################################################################
#
# cfengine_policysrv 
#  - software and processes on policy server (CFE Nova)
#
##################################################################

bundle agent cfengine_policysrv

{
 vars:

  SuSE.am_policy_hub::

   "match_package" slist => { 
                             "apache2", 
                             "apache2-mod_php5",
                             "apache2-prefork",
#                             "mysql",
                             "php5",
                             "php5-devel",
                             "php5-json",
                             "php5-pear",
                             "subversion",
                             "gcc",
                             "make",
                             "php5-mcrypt"
                            },
                 comment => "Define a list of packages to be installed on SuSE",
                  handle => "cfengine_policysrv_vars_match_package_suse";

   "buffer"  string => readfile("/etc/sysconfig/clock", "9999"),
            comment => "Get the whole contents of the file to extract a timezone later on",
             handle => "cfengine_policysrv_vars_buffer_suse";

  redhat_5.am_policy_hub::

   "match_package" slist => {
                             "httpd",
                             "mod_ssl",
#                             "mysql",
#                             "mysql-server",
                             "php",
                             "subversion",
                             "php-bcmath",
                             "php-pear",
                             "gcc",
#                             "php-mcrypt"
                            },
                 comment => "Define a list of packages to be installed on RedHat",
                  handle => "cfengine_policysrv_vars_match_package_redhat";

  (centos|fedora).am_policy_hub::

   "match_package" slist => {
                             "httpd",
                             "mod_ssl",
#                             "mysql",
#                             "mysql-server",
                             "php",
                             "subversion",
                             "php-bcmath",
                             "php-pear",
                             "gcc",
                             "php-mcrypt"
                            },
                 comment => "Define a list of packages to be installed on CentOS/Fedora",
                  handle => "cfengine_policysrv_vars_match_package_centos";

 debian.am_policy_hub::

  "match_package"  slist => {
                             "apache2",
#                             "mysql-server",
                             "php5",
                             "ssl-cert",
                             "gcc",
                             "make",
			     "php5-cli",
                             "php5-json",
                             "php-pear",
                             "php5-mcrypt"
                           },
                 comment => "Define a list of packages to be installed on Debian/Ubuntu",
                  handle => "cfengine_policysrv_vars_match_package_debian";

#

 classes:

  redhat.am_policy_hub::

   "no_mongo_module"        not => fileexists("/usr/lib64/php/modules/mongo.so"),
                        comment => "Check if mongo module installed or not",
                         handle => "cfengine_policysrv_classes_no_mongo_module_redhat_x86_64",
                     ifvarclass => "x86_64";

   "no_mongo_module"        not => fileexists("/usr/lib/php/modules/mongo.so"),
                        comment => "Check if mongo module installed or not",
                         handle => "cfengine_policysrv_classes_no_mongo_module_redhat_i686",
                     ifvarclass => "i686";

   "have_httpd_conf" expression => fileexists("/etc/httpd/conf/httpd.conf"),
                        comment => "Check if there is httpd.conf in place",
                         handle => "cfengine_policysrv_classes_have_httpd_conf";

  SuSE.am_policy_hub::

   "no_mongo_module"        not => fileexists("/usr/lib64/php5/extensions/mongo.so"),
                        comment => "Check if mongo module installed or not",
                         handle => "cfengine_policysrv_classes_no_mongo_module_suse_x86_64",
                     ifvarclass => "x86_64";

   "no_mongo_module"        not => fileexists("/usr/lib/php5/extensions/mongo.so"),
                        comment => "Check if mongo module installed or not",
                         handle => "cfengine_policysrv_classes_no_mongo_module_suse_i686",
                     ifvarclass => "i686";

   "suse_ok" expression => regextract(
                                     "TIMEZONE=\"(.*?)\"",
                                     "$(buffer)",
                                     "timezone"
                                     ),
                comment => "Extract system timezone to use later on",
                 handle => "cfengine_policysrv_classes_extract_system_timezone";

  ubuntu_10.am_policy_hub::

   "no_mongo_module"        not => fileexists("/usr/lib/php5/20090626/mongo.so"),
                        comment => "Check if mongo module installed or not",
                         handle => "cfengine_policysrv_classes_no_mongo_module_ubuntu_10_x86_64",
                     ifvarclass => "x86_64";

   "no_mongo_module"        not => fileexists("/usr/lib/php5/20090626+lfs/mongo.so"),
                        comment => "Check if mongo module installed or not",
                         handle => "cfengine_policysrv_classes_no_mongo_module_ubuntu_10_i686",
                     ifvarclass => "i686";

  ubuntu_8.am_policy_hub::

   "no_mongo_module"        not => fileexists("/usr/lib/php5/20060613/mongo.so"),
                        comment => "Check if mongo module installed or not",
                         handle => "cfengine_policysrv_classes_no_mongo_module_ubuntu_8_x86_64",
                     ifvarclass => "x86_64";

   "no_mongo_module"        not => fileexists("/usr/lib/php5/20060613+lfs/mongo.so"),
                        comment => "Check if mongo module installed or not",
                         handle => "cfengine_policysrv_classes_no_mongo_module_ubuntu_8_i686",
                     ifvarclass => "i686";

#

 packages:

  SuSE.am_policy_hub::

   "$(match_package)"

             comment => "Install packages from the list",
              handle => "cfengine_policysrv_packages_install_package_suse",
      package_policy => "add",
      package_method => zypper,
             classes => if_repaired("a2enmod_ssl");

  redhat.am_policy_hub::

   "$(match_package)"

             comment => "Install packages from the list",
              handle => "cfengine_policysrv_packages_install_package_redhat",
      package_policy => "add",
      package_method => yum,
             classes => if_repaired("pecl_mongo");

  debian.am_policy_hub::

   "$(match_package)"

             comment => "Install packages from the list",
              handle => "cfengine_policysrv_packages_install_package_debian",
      package_policy => "add",
      package_method => apt,
             classes => if_repaired("a2enmod_php5_ssl");

#

 processes:

   "mongod" restart_class => "remove_mongod_lock",
                  comment => "Check if mongod process is dead",
                   handle => "cfengine_policysrv_mongod_lock_cleanup";

#

 commands:

  a2enmod_php5_ssl::

   "/usr/sbin/a2enmod php5 ssl rewrite",
      comment => "Enable apache modules on Debian/Ubuntu",
       handle => "cfengine_policysrv_commands_a2enmod_debian";
#      classes => if_repaired("restart_apache2");

  a2enmod_php5_ssl.no_mongo_module::

   "/usr/bin/pecl install mongo"
      comment => "Download and install PHP Mongo module on Debian/Ubuntu",
       handle => "cfengine_policysrv_commands_pecl_install_mongo_debian";   

  restart_apache2::

   "/sbin/service apache2 restart"
      comment => "Restart APACHE2 on SLES/OpenSuSE",
       handle => "cfengine_policysrv_commands_restart_apache2";

  a2enmod_ssl::

   "/usr/sbin/a2enmod ssl && /usr/sbin/a2enflag SSL && /usr/bin/gensslcert"
      comment => "Enable apache modules on SuSE",
       handle => "cfengine_policysrv_commands_a2enmod_ssl_suse";

   "/usr/sbin/a2enmod rewrite"
      comment => "Enable PHP Rewrite modules on SuSE",
       handle => "cfengine_policysrv_commands_a2enmod_rewrite_suse";

  a2enmod_ssl.no_mongo_module::

   "/usr/bin/pecl install mongo"
      comment => "Download and install PHP Mongo module on SuSE",
       handle => "cfengine_policysrv_commands_pecl_install_mongo_suse",
      contain => in_shell;

  a2ensite_ssl::

   "/usr/sbin/a2ensite ssl"
      comment => "Enable apache SSL on Debian/Ubuntu",
       handle => "cfengine_policysrv_commands_a2ensite_ssl";

  pecl_mongo.no_mongo_module::

   "/usr/bin/pecl install mongo"
      comment => "Download and install PHP Mongo module on Redhat/CentOS/Fedora",
       handle => "cfengine_policysrv_commands_pecl_install_mongo_redhat";

  restart_httpd::

   "/sbin/service httpd restart"
      comment => "Restart HTTPD on Redhat/CentOS/Fedora",
       handle => "cfengine_policysrv_commands_restart_httpd";

#

 files:

  debian.am_policy_hub::

   "/var/www/."
          comment => "Clear up index.html page if there is",
           handle => "cfengine_policysrv_file_tidy_index_html",
           delete => tidy,
       file_select => by_name("index.html"),
      depth_search => recurse("1");

   "/etc/apache2/sites-available/ssl"
        comment => "Prepare SSL config for available sites",
         handle => "cfengine_policysrv_files_ssl",
      copy_from => local_cp("/etc/apache2/sites-available/default-ssl"),
         action => immediate,
        classes => if_repaired("a2ensite_ssl");

  SuSE.am_policy_hub::

   "/etc/apache2/vhosts.d/vhost-ssl.conf"
        comment => "Prepare SSL template for virtual hosts",
         handle => "cfengine_policysrv_files_vhost_ssl",
      copy_from => local_cp("/etc/apache2/vhosts.d/vhost-ssl.template"),
         action => immediate;

   "/etc/apache2/conf.d/nova.conf"
            comment => "Allow Override all and Encoded slashes to $(sys.doc_root)",
             handle => "cfengine_policysrv_files_apache_nova_conf_suse",
             create => "true",
      edit_defaults => empty,
          edit_line => apache_nova_conf("$(sys.doc_root)"),
            classes => if_repaired("restart_apache2");

   "/etc/php5/apache2/php.ini"
        comment => "Ensure that date.timezone in php.ini has the same valuae as the machine",
         handle => "cfengine_policysrv_files_apache_php_ini",
      edit_line => add_php_timezone("$(timezone[1])");

  redhat.am_policy_hub::

   "/etc/httpd/conf.d/nova.conf"
            comment => "Allow Override all and Encoded slashes to $(sys.doc_root)",
             handle => "cfengine_policysrv_files_apache_nova_conf_redhat",
             create => "true",
      edit_defaults => empty,
          edit_line => apache_nova_conf("$(sys.doc_root)"),
            classes => if_repaired("restart_httpd");

   "/etc/httpd/conf/httpd.conf"
         comment => "To append CFE nova.conf to be used for a web server",
          handle => "cfengine_policysrv_files_append_nova_conf_line_httpd_conf",
       edit_line => append_if_no_line("Include conf.d/nova.conf"),
         classes => if_repaired("restart_httpd"),
      ifvarclass => "have_httpd_conf";

  remove_mongod_lock::

   "$(sys.workdir)/state/mongod.lock"
        comment => "Remove stale mongod lock file",
         delete => tidy;

}

#

bundle edit_line apache_nova_conf(folder)
{
 insert_lines:
  am_hub_master::
"<Directory \"$(folder)\">
  Options Indexes FollowSymLinks
  AllowOverride All
  Order allow,deny
  Allow from all
</Directory>
AllowEncodedSlashes On",
   comment => "Create apache2 contents for a Master HUB",
    handle => "apache_nova_conf_insert_lines_am_hub_master";

  !am_hub_master::
"<Directory \"$(folder)\">
  Options FollowSymLinks
  AllowOverride None
  RewriteEngine on
  RewriteRule ^(.*)$ http://$(sys.hub_master)/$1 [R=307,L,QSA]
</Directory>",
   comment => "Create apache2 contents for Slave HUBs",
    handle => "apache_nova_conf_insert_lines_not_am_hub_master";
}

#

bundle edit_line add_php_timezone(xxx)
{
 replace_patterns:
  ";date.timezone.*"
          comment => "Assign system timezone to PHP",
           handle => "add_php_timezone_replace_patterns_date_timezone",
     replace_with => value("date.timezone = $(xxx)");
#  "date.timezone\h+=\h+(?!$(xxx)).*"
#     replace_with => value("date.timezone = $(xxx)");
}

##################################################################
#
# cfengine_web_server(on/off) 
#  - Apache Web Modules (CFE Nova)
#
##################################################################

bundle agent cfengine_web_server(state)
{
 vars:

  "start_type"  string => "start",
               comment => "Define a start signal",
                handle => "cfengine_web_server_vars_start_type";

#
			
 classes:

  "web_servers"      or => { "am_policy_hub" },
                comment => "Alias a name am_policy_hub to webservers",
                 handle => "cfengine_web_server_classes_web_servers";

  "on"       expression => strcmp("$(state)","on"),
                comment => "Check if a keyword \"on\" is inputs",
                 handle => "cfengine_web_server_classes_on";

  "off"      expression => strcmp("$(state)","off"),
                comment => "Check if a keyword \"off\" is inputs",
                 handle => "cfengine_web_server_classes_off";

# we only care about selinux for redhat for now, can add more
 
 redhat::

   "disable_selinux" expression => returnszero("/usr/sbin/selinuxenabled", "noshell"),
                        comment => "Check if selinux is enabled",
                         handle => "cfengine_web_server_classes_disable_selinux";

#

 processes:

  SuSE.web_servers.on::

   "apache2"
      restart_class => "suse_start_apache",
            comment => "Start apache2 process if not exist",
             handle => "cfengine_web_server_processes_apache_on_suse";

#   "mysqld"
#      restart_class => "suse_start_mysql",
#            comment => "Start mysqld process if not exist",
#             handle => "cfengine_web_server_processes_mysqld_on_suse";

  redhat.web_servers.on::

   ".*httpd.*"
      restart_class => "redhat_start_apache",
            comment => "Start httpd process if not exist",
             handle => "cfengine_web_server_processes_httpd_on_redhat";

#   ".*mysqld.*"
#      restart_class => "redhat_start_mysql",
#            comment => "Start mysqld process if not exist",
#             handle => "cfengine_web_server_processes_mysqld_on_redhat";

  debian.web_servers.on::

   ".*apache2.*"
      restart_class => "debian_start_apache",
            comment => "Start apache2 process if not exist",
             handle => "cfengine_web_server_processes_apache_on_debian";

#   "/usr/sbin/mysqld.*"
#      restart_class => "debian_start_mysql",
#            comment => "Start apache2 process if not exist",
#             handle => "cfengine_web_server_processes_mysqld_on_debian";

  SuSE.off::

   "apache2"
      process_stop => "/etc/init.d/apache2 stop",
           comment => "Stop apache2 process",
            handle => "cfengine_web_server_processes_apache_off_suse";

#   "mysqld"
#      process_stop => "/etc/init.d/mysql stop",
#           comment => "Stop mysqld process",
#            handle => "cfengine_web_server_processes_mysqld_off_suse";

  redhat.off::

   "/usr/sbin/httpd"
      process_stop => "/etc/init.d/httpd stop",
           comment => "Stop httpd process",
            handle => "cfengine_web_server_processes_httpd_off_redhat";

#   "mysqld"
#      process_stop => "/etc/init.d/mysqld stop",
#           comment => "Stop mysqld process",
#            handle => "cfengine_web_server_processes_mysqld_off_redhat";

  debian.off::

   "/usr/sbin/apache2.*"
      process_stop => "/etc/init.d/apache2 stop",
           comment => "Stop apache2 process",
            handle => "cfengine_web_server_processes_apache_off_debian";

#   "mysqld"
#      process_stop => "/etc/init.d/mysql stop",
#           comment => "Stop mysqld process",
#            handle => "cfengine_web_server_processes_mysqld_off_debian";

#

 commands:

  web_servers.disable_selinux::

   "/usr/sbin/setenforce 0"
      comment => "Disable SELINUX",
       handle => "cfengine_web_server_commands_disable_selinux",
#      classes => cmd_repair("0", "cmd_fixed_setenforce"),
       action => if_elapsed("60");

  web_ok.suse_start_apache::

   "/etc/init.d/apache2 $(start_type)"
      comment => "Start apache2 process if not exist",
       handle => "cfengine_web_server_commands_start_apache_suse";

#  suse_start_mysql::
#
#   "/etc/init.d/mysql start"
#      comment => "Start mysql process if not exist",
#       handle => "cfengine_web_server_commands_start_mysql_suse";

  redhat_start_apache::

   "/etc/init.d/httpd $(start_type)"
      comment => "Start httpd process if not exist",
       handle => "cfengine_web_server_commands_start_httpd_redhat";

#  redhat_start_mysql::
#
#   "/etc/init.d/mysqld start"
#      comment => "Start mysqld process if not exist",
#       handle => "cfengine_web_server_commands_start_mysqld_redhat";

  debian_start_apache::

   "/etc/init.d/apache2 $(start_type)"
      comment => "Start apache process if not exist",
       handle => "cfengine_web_server_commands_start_apache_debian";

#  debian_start_mysql::
#
#   "/etc/init.d/mysql start"
#      comment => "Start mysql process if not exist",
#       handle => "cfengine_web_server_commands_start_mysql_debian";

#

 files:

  SuSE.web_servers::

   "/etc/sysconfig/apache2" 
        comment => "Ensure apache2 modules will be loaded",
         handle => "cfengine_web_server_files_sysconfig_apache2",
      edit_line => fixapache,
        classes => if_ok("web_ok");

# redhat.web_servers::
#
#  "/etc/httpd/conf/httpd.conf"
#
#     edit_line => comment_lines_matching("Listen 80","#"),
#     classes => if_ok("web_ok");

# debian.web_servers::
#
#  "/etc/apache2/ports.conf"
#
#     edit_line => append_if_no_line("Listen 443"),
#     classes => if_ok("web_ok");

#

 reports:

  disable_selinux::

   " NB - Disabling SELinux to allow PHP to function",
      comment => "Alert message on screen",
       handle => "cfengine_web_server_reports_disable_selinux";

}

#######################################################
# For the library
#######################################################

bundle edit_line fixapache
{
 vars:

   "add_modules"     slist => { 
                               "php5",
                               "ssl",
                               "rewrite" 
                              };

   "del_modules"     slist => { 
                               "php3",
                               "php4",
                               "jk"
                              };

 field_edits:

#####################################################################
# APACHE_MODULES="actions alias ssl php5 dav_svn authz_default jk" etc..
#####################################################################

   "APACHE_MODULES=.*"

      # Insert module "columns" between the quoted RHS 
      # using space separators

      edit_field => quoted_var("$(add_modules)","append");

   "APACHE_MODULES=.*"

      # Delete module "columns" between the quoted RHS 
      # using space separators

      edit_field => quoted_var("$(del_modules)","delete");

}

##################################################################
#
# cfengine_editor 
#  - Prepare the hub for CFE online editing tool (CFE Nova)
#
##################################################################

bundle agent cfengine_editor
{
 vars:

  redhat::

   "web_owner"   string => "apache",
                comment => "Define an owner for online editor",
                 handle => "cfengine_editor_vars_web_owner_redhat";

   "web_group"   string => "apache",
                comment => "Define a group for online editor",
                 handle => "cfengine_editor_vars_web_group_redhat";

  SuSE::

   "web_owner"   string => "wwwrun",
                comment => "Define an owner for online editor",
                 handle => "cfengine_editor_vars_web_owner_suse";

   "web_group"   string => "www",
                comment => "Define a group for online editor",
                 handle => "cfengine_editor_vars_web_group_suse";

  debian::

   "web_owner"   string => "www-data",
                comment => "Define an owner for online editor",
                 handle => "cfengine_editor_vars_web_owner_debian";

   "web_group"   string => "www-data",
                comment => "Define a group for online editor",
                 handle => "cfengine_editor_vars_web_group_debian";

#

 files:

  !windows.am_policy_hub::

   "$(sys.doc_root)/graphs/." -> "Cfengine Nova Knowledge Map",
       create => "true",
        perms => mog("755","$(web_owner)","$(web_group)"),
      comment => "Make sure web server has permission to create working directories for Knowledge Map",
       handle => "cfengine_editor_files_graphs_dir";

  !windows.am_policy_hub::

   "$(sys.doc_root)/policies/." -> "Cfengine Nova Editor",
       create => "true",
        perms => mog("700","$(web_owner)","$(web_group)"),
      comment => "Make sure web server has permission to create working directories for editor users",
       handle => "cfengine_editor_files_policies_dir";

  !windows.am_policy_hub::

   "$(sys.doc_root)/policies/." -> "Cfengine Nova Editor",
            delete => tidy,
       file_select => days_old("1"),
      depth_search => recurse("inf"),
           comment => "Remove working directories of old editor sessions",
            handle => "cfengine_editor_files_policies_tidy";

}

##################################################################
#
# garbage_collection
#  - do some garbage collection on  
#
##################################################################

bundle agent garbage_collection
{
 files:

  Sunday::

   "$(sys.workdir)/cf_repair.log" 
      comment => "Rotate the promises repaired logs each week",
       handle => "garbage_collection_files_cf_repair_log",
       rename => rotate("7"),
       action => if_elapsed("10000");

   "$(sys.workdir)/cf_notkept.log" 
      comment => "Rotate the promises not kept logs each week",
       handle => "garbage_collection_files_cf_notkept_log",
       rename => rotate("7"),
       action => if_elapsed("10000");

   "$(sys.workdir)/promise_summary.log" 
      comment => "Rotate the promises not kept logs each week",
       handle => "garbage_collection_files_promise_log",
       rename => rotate("7"),
       action => if_elapsed("10000");

   "$(sys.workdir)/state/cf_value.log" 
      comment => "Rotate the promises not kept logs each week",
       handle => "garbage_collection_files_cf_value_log",
       rename => rotate("7"),
       action => if_elapsed("10000");

   "/var/log/mongod.log"
      comment => "Rotate the mongo db transactio logs each week",
       handle => "garbage_collection_files_mongod_log",
       rename => rotate("7"),
       action => if_elapsed("10000");

  any::

   "$(sys.workdir)/outputs" 
           comment => "Garbage collection of any output files",
            handle => "garbage_collection_files_tidy_outputs",
            delete => tidy,
       file_select => days_old("7"),
      depth_search => recurse("inf");

  # Other resources

   "/tmp" 
           comment => "Garbage collection of any temporary files",
            handle => "garbage_collection_files_tidy_tmp",
            delete => tidy,
       file_select => days_old("3"),
      depth_search => recurse("inf");
  
   "/var/log/apache2/.*bz" 
          comment => "Garbage collection of rotated log files",
           handle => "garbage_collection_files_tidy_bz",
           delete => tidy,
      file_select => days_old("30");


   "/var/log/apache2/.*gz" 
          comment => "Garbage collection of rotated log files",
           handle => "garbage_collection_files_tidy_gz",
           delete => tidy,
      file_select => days_old("30");

 SuSE::

   "/var/log/zypper.log"
      comment => "Prevent the zypper log from choking the disk",
       handle => "garbage_collection_files_zypper_log",
       rename => rotate("0"),
       action => if_elapsed("10000");

}
