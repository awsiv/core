
#
# Set up the knowledge management components
#

bundle agent setup_knowledge
{
vars:

 !windows.policy_host::

  "doc_root" string => readfile("$(sys.workdir)/document_root.dat",40),
            comment => "Read the knowledge base document root for the web server";

  "config_src"   string => "$(sys.workdir)/inputs";

  "hosts"  slist => hostsseen("inf","lastseen","name");

#############################################################################

classes:

  #
  # check when updates arrive, new compared to the database
  #

 !windows.policy_host::

   "kn_update"   or => { isnewerthan("$(config_src)","$(doc_root)/db_stamp"), "Hr06.Min10_15" }; 

   "kn_init"     not => fileexists("$(doc_root)/db_stamp");

#############################################################################

files:

  kn_init::

   "$(doc_root)/db_stamp"

       create => "true",
      classes => if_repaired("init_knowledge"),
      comment => "Create a time stamp file for checking for the last update";  

  kn_update::

   "$(doc_root)/db_stamp"

        touch => "true",
      comment => "Record the time of last update";

  SuSE.policy_host::

  "/tmp/mysql.sock"

         comment => "Create a temp link to mysql.sock",
       link_from => ln_s("/var/lib/mysql/mysql.sock");

  debian.policy_host::

  "/tmp/mysql.sock"

         comment => "Create a temp link to mysql.sock",
       link_from => ln_s("/var/run/mysqld/mysqld.sock");

  "/var"

     file_select => folder("www"),
    depth_search => recurse("1"),
           perms => mog("755","www-data","www-data");
	
  "/var/www/.cfagent/."

    depth_search => recurse_basedir("inf"),
           perms => mog("700","www-data","www-data");
	
  redhat.policy_host::

  "/tmp/mysql.sock"

         comment => "Create a temp link to mysql.sock",
       link_from => ln_s("/var/lib/mysql/mysql.sock");

  "/var"

     file_select => folder("www"),
    depth_search => recurse("1"),
           perms => mog("755","apache","apache");

  "/var/www/.cfagent/."

    depth_search => recurse_basedir("inf"),
           perms => mog("700","apache","apache");
	
  !windows.policy_host::

  "$(doc_root)"

         comment => "Copy the basic knowledge base configuration from the installation to doc root",
       copy_from => local_cp("$(sys.workdir)/share/doc/cfnova/knowledge"),
    depth_search => recurse("inf"),
           perms => mo("644","root"),
    file_select  => knowledge_files;

#   "$(doc_root)/promise_knowledge.cf"
#
#         comment => "Copy the Nova auto-analysis file into the knowledge base directory",
#       copy_from => local_cp("$(sys.workdir)/promise_knowledge.cf"),
#           perms => mo("644","root");

#
# Deprecated:
#
#  "$(doc_root)/reports/$(hosts)/fluctuations.nov" 
#
#      comment => "Update long view files for monitoring knowledge",
#        perms => mo("600","root"),
#    copy_from => remote_cp("$(sys.workdir)/reports/fluctuations.nov","$(hosts)"),
#       action => immediate,
#      classes => if_repaired("mon_update");
#
#  "$(doc_root)/reports/$(hosts)/mean_field.nov" 
#
#      comment => "Update magnified view files for monitoring knowledge",
#        perms => mo("600","root"),
#    copy_from => remote_cp("$(sys.workdir)/reports/mean_field.nov","$(hosts)"),
#       action => if_elapsed("240");
#

   "$(doc_root)"

          comment => "Make sure knowledge files are accessible to webserver",
            perms => mo("644","root"),
     depth_search => recurse_exclude("inf",".cfagent");

   #
   # Cleanup
   #

   "$(doc_root)/reports/$(hosts)/cf.*" -> "collate_outputs",

          comment => "Essential garbage collection process, to balance the collate_output promise. Without this the disk will fill with out of date reports.",
           delete => tidy,
      file_select => days_old("7");

#############################################################################

commands:

  init_knowledge::

   "/var/cfengine/bin/cf-know -f $(doc_root)/docs/enterprise_build.cf -sg"

      comment => "Populate database for knowledge (initialization)",
      classes => if_repaired("rebuilt_knowledge"),
      contain => in_dir("$(doc_root)");

  policy_host.kn_update::

    "/var/cfengine/bin/cf-know -f $(doc_root)/docs/enterprise_build.cf -sg"

       comment => "Populate or update database with new knowledge",
       classes => if_repaired("rebuilt_knowledge"),
       contain => in_dir("$(doc_root)");

  any::

    "$(sys.cf_promises) -r"

       comment => "Generate config knowledge format after update",
       contain => silent_in_dir("$(doc_root)"),
        action => if_elapsed("240");

}

#############################################################################

body action aggregator

{
ifelapsed => "120";
expireafter => "240";
background => "true";
}

############################################################################

body file_select knowledge_files

{
leaf_name => { ".*.cf", ".*.html", ".*.png", ".*php", ".*css" };

file_result => "leaf_name";
}

############################################################################

body file_select folder(regex)
{
 leaf_name  => { ".*$(regex)$"};
 file_result => "leaf_name";
}

############################################################################

body depth_search recurse_basedir(d)
{
 depth => "$(d)";
 include_basedir => "true";
}

############################################################################

body depth_search recurse_exclude(d,folder)
{
 depth => "$(d)";
 exclude_dirs => { ".*$(folder)$" };
}
