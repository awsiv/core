
bundle knowledge enterprise_knowledge
{
topics:

 cfengine_knowledge_base::

  "system reports" comment => "Reports generated by cfengine";

 # This is example knowledge -- add your own

 services::

  "Cfengine" comment => "Cfengine automation";
  "WWW"      comment => "Web service";
  "DNS"      comment => "Domain Name Service";
  "NFS"      comment => "Network File System (storage)";
  "LDAP"     comment => "Directory Service";
  "DB"       comment => "Relational database service";

 Contracts_and_Agreements::

  "Service Level Agreements";



occurrences:

 cfengine_knowledge_base::

   "reports/meters.png"

            represents => { "status summary", "/knowledge/reports/host_portal.html" },
            representation => "image",
            web_root => "/reports/knowledge/host_portal.html";

 machine_resources::

   "reports/meters.png"

            represents => { "status summary", "/knowledge/reports/host_portal.html" },
            representation => "image",
            web_root => "/reports/knowledge/host_portal.html";

   "reports/hosts_portal.html"

            represents => { "portal" },
            representation => "file",
            path_root => "$(enterprise_start.doc_root)",
            web_root => "";
    

 outputs::

   "reports/(.*)/preview"

            represents => { "alerts from $(match.1)" },
            representation => "file",
            path_root => "$(enterprise_start.doc_root)",
            web_root => "";

 audit_report::

   "Detailed reports with every transaction made by cfengine - very storage consuming"

            represents => { "description" },
            representation => "literal";
 
   "reports/(.*)/audit.html"

            represents => { "on $(match.1)" },
            representation => "file",
            path_root => "$(enterprise_start.doc_root)",
            web_root => "";

 performance_report::

   "Describes the real time it has taken on average to complete or keep promises"

            represents => { "description" },
            representation => "literal";

   "reports/(.*)/performance.html"

            represents => { "on $(match.1)" },
            representation => "file",
            path_root => "$(enterprise_start.doc_root)",
            web_root => "/knowledge";

 all_locks_report::

   "A list of locks that have been acquired, indicating promise checks"

            represents => { "description" },
            representation => "literal";

   "reports/(.*)/all_locks.html"

            represents => { "on $(match.1)" },
            representation => "file",
            path_root => "$(enterprise_start.doc_root)",
            web_root => "/knowledge";

 active_locks_report::

   "Currently active locks -- this should normally be an unstable short list or nothing. Could indicate hung cfengine processes."

            represents => { "description" },
            representation => "literal";

   "reports/(.*)/active_locks.html"

            represents => { "on $(match.1)" },
            representation => "file",
            path_root => "$(enterprise_start.doc_root)",
            web_root => "/knowledge";

 hashes_report::

   "A list of actual computed hash values for promised files."

            represents => { "description" },
            representation => "literal";

   "reports/(.*)/hashes.html"

            represents => { "on $(match.1)" },
            representation => "file",
            path_root => "$(enterprise_start.doc_root)",
            web_root => "/knowledge";

 classes_report::

   "Shows non-hard classes defined on the current host. This provides something like CMDB information but at level that can say something about the dynamics of the system. Probabilities that classes have been defined are based on actual observation."

            represents => { "description" },
            representation => "literal";

   "reports/(.*)/classes.html"

            represents => { "on $(match.1)" },
            representation => "file",
            path_root => "$(enterprise_start.doc_root)",
            web_root => "/knowledge";

 variables_report::

   "Shows the values of variables used on each host. Some discovered, some defined."

            represents => { "description" },
            representation => "literal";

   "reports/(.*)/variables.html"

            represents => { "on $(match.1)" },
            representation => "file",
            path_root => "$(enterprise_start.doc_root)",
            web_root => "/knowledge";



 lastseen_report::

   "When was the last time the current host contacted or was contacted by another? (+) indicates contacted, (-) indictaes was contacted by."

            represents => { "description" },
            representation => "literal";


   "reports/(.*)/lastseen.html"

            represents => { "on $(match.1)" },
            representation => "file",
            path_root => "$(enterprise_start.doc_root)",
            web_root => "/knowledge";

 compliance_report::

   "Show the status of alls promise, along with average compliance. Useful for quick auditing."

            represents => { "description" },
            representation => "literal";

   "reports/(.*)/compliance.html"

            represents => { "on $(match.1)" },
            representation => "file",
            path_root => "$(enterprise_start.doc_root)",
            web_root => "/knowledge";

 promise_report::

   "Show the status of named policy promises, along with average compliance. Useful for quick auditing."

            represents => { "description" },
            representation => "literal";

   "reports/(.*)/promise_compliance.html"

            represents => { "on $(match.1)" },
            representation => "file",
            path_root => "$(enterprise_start.doc_root)",
            web_root => "/knowledge";


 setuid_report::

   "List the discovered setuid/setgid root programs on the system (Unix only)"

            represents => { "description" },
            representation => "literal";

   "reports/(.*)/setuid.html"

            represents => { "on $(match.1)" },
            representation => "file",
            path_root => "$(enterprise_start.doc_root)",
            web_root => "/knowledge";

 file_changes_report::

   "A log of changes to files promised under change monitoring"

            represents => { "description" },
            representation => "literal";

   "reports/(.*)/file_changes.html"

            represents => { "on $(match.1)" },
            representation => "file",
            path_root => "$(enterprise_start.doc_root)",
            web_root => "/knowledge";

 installed_software_report::

   "OS software packages installed and their version information."

            represents => { "description" },
            representation => "literal";

   "reports/(.*)/software_packages.html"

            represents => { "on $(match.1)" },
            representation => "file",
            path_root => "$(enterprise_start.doc_root)",
            web_root => "/knowledge";

 software_patches_report::

   "For systems with a separate patch model, this shows OS software patches. There are two reports (for current status and patches that are available but not already applied)"

            represents => { "description" },
            representation => "literal";

   "reports/(.*)/software_patch_status.html"

            represents => { "status $(match.1)" },
            representation => "file",
            path_root => "$(enterprise_start.doc_root)",
            web_root => "/knowledge";

   "reports/(.*)/software_patch_avail.html"

            represents => { "available on $(match.1)" },
            representation => "file",
            path_root => "$(enterprise_start.doc_root)",
            web_root => "/knowledge";


monitor_now_report::

   "reports/(.*)/mainpage.html"

            represents => { "available on $(match.1)" },
            representation => "file",
            path_root => "$(enterprise_start.doc_root)",
            web_root => "/knowledge";


monitor_history_report::

   "reports/(.*)/mainpage.html"

            represents => { "available on $(match.1)" },
            representation => "file",
            path_root => "$(enterprise_start.doc_root)",
            web_root => "/knowledge";

monitor_summary_report::

   "reports/host_portal.html"

            represents => { "index portal" },
            representation => "file",
            path_root => "$(enterprise_start.doc_root)",
            web_root => "/knowledge";

cfengine_knowledge_base::

   "reports/host_portal.html"

            represents => { "monitor portal" },
            representation => "file",
            path_root => "$(enterprise_start.doc_root)",
            web_root => "/knowledge";

hosts::

   "reports/(.*)/mainpage.html"

            represents => { "$(match.1)" },
            representation => "file",
            path_root => "$(enterprise_start.doc_root)",
            web_root => "/knowledge";

}
