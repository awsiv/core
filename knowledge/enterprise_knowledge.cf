


#######################################################################

bundle knowledge enterprise_start

{
topics:

 any::

   "library" comment => "A area of the mission portal where users can ask questions about the meaning of topics, see relationships, and view stories about system knowledge.",
           association => a("is a room in the","mission portal","has room");

   "library" association => a("contains","documentation","is contained in");
   "library" association => a("contains","topic finder","is contained in");
   "library" association => a("contains","message archive","is contained in");

   "topic finder" comment => "A search tool for topics in the Copernicus Knowledge Map",
              association => a("locates","promises","may be located by");

   "topic finder" comment => "A search tool for topics in the Copernicus Knowledge Map",
              association => a("locates","subjects","may be located by");

  "documentation" comment => "Written information about the Cfengine software";

   "places" comment => "Geographical locations";
   "companies" comment => "Commercial organization",
              synonyms => { "company", "firm" },
           association => a("are a form of","organization","has example");

   "software" comment => "Computer programs.";

   "how to use the library" comment => "Some basic help about using the Mission Portal library";

documentation::

  "special topics guide" comment => "Short document on a specialized topic";
  "manual" comment => "A general document about Cfengine software.";

 companies::

   "Cfengine" comment => "The commercal organization supporting the Cfengine software";

 software::

   "Cfengine" comment => "A framework for automated, self-repairing system.";

 places::

   "Salt Lake City" comment => "North America, Utah. Timezone MDT/GMT-6.";
   "New York" comment => "North America, NY State, East Coast. Timezone EST/GMT-5.";
   "Monterey" comment => "North America, California, West Coast. Timezone PST/GMT-8.";
   "London"   comment => "United Kingdom, England. Timezone GMT.";
   "Oslo"     comment => "Norway, South. Timezone CET/MET/GMT+1.";
   "Bergen"     comment => "Norway, West. Timezone CET/MET/GMT+1.";
   "Valbonne"     comment => "France, South. Timezone CET/MET/GMT+1.";
   "Toulouse"     comment => "France, South. Timezone CET/MET/GMT+1.";
   "Amsterdam"    comment => "Netherlands. Timezone CET/MET/GMT+1.";


  # These topics need repetition here compared to Copernicus

   "Frequently Asked Topics";

 Frequently_Asked_Topics::

      "operating systems"    comment => "System software";
      "management issues"    comment => "Decision making support";
      "security"             comment => "Defending an acceptable level of risk";

   "system knowledge"   comment => "Cfengine knowledge console";

 machine_resources::

   "hosts" comment => "A general term for computers that run applications or virtual guests",
       association => a("form the bulk of","machine resources","are composed from"); 


 system_knowledge::

  "system reports" comment => "Reports generated by cfengine";
  "system trends"  comment => "Long term performance data about the system.";

  "service catalogue" comment => "The basic service promises of the system",
                    association => a("promises are implemented as","system_policy::bundles","implement");

  "service catalogue" 
                    association => a("is a list of","services","are described in");

  "server lifecycle" comment => "From creation to update and eventual reinstallation",
                     association => a("is modelled by","BDMA","is a model for");

  "machine resources"  comment => "An inventory of physical and virtual resources";

  "reporting hub" comment => "A host that aggregates reports in a Nova/star network.";


 system_knowledge::

   "full hub query"  comment => "A full report update downloaded by a Nova hub for the past 4 hours";
   "delta hub query"  comment => "A regular report update downloaded by a Nova hub for the past 5 minutes";

   "copernicus"      comment => "Cfengine's online support knowledge viewer";

     "management issues"  comment => "The main areas of management";

   "views"  comment => "Roles for IT stakeholders";

   "mission status" comment => "Overview of IT operations",
       association => a("may be seen from","architect view","is a viewpoint on"); 
   "mission status"
       association => a("may be seen from","manager view","is a viewpoint on"); 
   "mission status"
       association => a("may be seen from","operator view","is a viewpoint on"); 
   "mission status"
       association => a("may be seen from","security view","is a viewpoint on"); 


  ##########
  #  Mission views / roles
  ##########

 views::

   "architect view"
       association => a("planning the system lifecycle","BDMA","is an aspect of"); 

   "architect view"
       association => a("is informed by","system trends","are an aspect of"); 

   "architect view"
       association => a("is about plotting","system policy","is an aspect of"); 

   "architect view"
       association => a("depends on environmental","contexts","are an aspect of"); 

   "architect view"
       association => a("is informed by","service catalogue","are an aspect of"); 

   "architect view"
       association => a("designs","system policy","is designed by"); 


   #

   "manager view"
       association => a("is responsible for","service catalogue","are an aspect of"); 

   "manager view"
       association => a("sees the catalogue of","management issues","are an aspect of"); 

   "manager view"
       association => a("contains a current summary of","compliance report","is an aspect of"); 

   "manager view"
       association => a("needs an appreciation of","server lifecycle","is an aspect of"); 

   "manager view"
       association => a("needs an appreciation of","","is an aspect of"); 

   #

   "operator view"
       association => a("displays operational state in","host portal","is a resource for"); 

   "operator view"
       association => a("has open tickets under","faults","is a resource for"); 

   "operator view"
       association => a("displays operational goals in","system policy","is a resource for"); 

   "operator view"
       association => a("displays communications summary in","lastseen report","is a resource for"); 

   "operator view"
       association => a("recent compliance at","promise report","is a resource for"); 

   "operator view"
       association => a("recent compliance at","promises repaired report","is a resource for"); 
 
   "operator view"
       association => a("recent compliance at","promises not kept report","is a resource for"); 

   "operator view"
       association => a("see promise cost in","performance report","is a resource for"); 

   "operator view"
       association => a("see software state","software installed report","is a resource for"); 

   "operator view"
       association => a("see policy-defined events in","system outputs","are an aspect of"); 

   #

   "security view"
       association => a("contains a current summary of","setuid report","is a resource for"); 

   "security view"
       association => a("contains a current summary of","patches installed report","is a resource for"); 

   ##########
   # Aspects
   ##########


 architect_view::

  "mission statement"       comment => "Business objectives";
  "quality assurance"       comment => "Procedures for review";

 security_view::

   "security policy"           comment => "Local risk assessment summary";
   "security routines and procedures"   comment => "Non-automated, human workbook";

 manager_view::

   "request for change"       comment => "(RFC) The initial proposal for an intended change of system policy.";

   "request for change"       association => a("are a basis for","change management","uses");
   "request for change"       association => a("might be an example of","intentions","might be a");
   "request for change"       association => a("might be an example of","promise proposals","might be a");       

   "software licenses" comment => "Terms of agreements, and renewal status",
                              association => a("are reported in","license report","reports on");       

   "service level agreements" comment => "Promises made to clients about services";

   "work shifts"              comment => "Staff rotas";

   "current projects"         comment => "Team projects and service";

   "suppliers"                comment => "Contact information and web pages";

 mission_status::

  "system policy"   comment => "Local policy description with comments and dependencies";
  "system reports"  comment => "Reports from around the system";
  "host portal"     comment => "Portal to access mission status, monitored host data";
  "system outputs" comment => "Messages sent by cfengine to the operators as a matter of policy.";

}

 
############################################################################
# The Map
############################################################################


############################################################################
# The Map
############################################################################

bundle knowledge tm

{
vars:

  #
  # Association bank
  #

  "impl[f]" string => "implements";
  "impl[b]" string => "may be implemented by";

  "impr[f]" string => "improves";
  "impr[b]" string => "is improved by";

  "eg[f]" string => "exemplifies";
  "eg[b]" string => "has example";

  "inst[f]" string => "is an instance of";
  "inst[b]" string => "has instances";

  "add[f]" string => "feature added in";
  "add[b]" string => "added feature";

  "attr[f]" string => "is an attribute of";
  "attr[b]" string => "has attribute";

  "cause[f]" string => "possibly caused by";
  "cause[b]" string => "can cause";

  "chg[f]" string => "changes";
  "chg[b]" string => "is changed by";

  "use[f]" string => "may be used for";
  "use[b]" string => "makes use of";

  "it[f]" string => "can be iterated action";
  "it[b]" string => "has iterators";

  "wrote[f]" string => "is the author of";
  "wrote[b]" string => "was written by";

  "edited[f]" string => "edited";
  "edited[b]" string => "was edited by";

  "about[f]" string => "deals with concept of";
  "about[b]" string => "concept explained in";

  "same[f]" string => "is related to";
  "same[b]" string => "is related to";

  "part[f]" string => "is a component of";
  "part[b]" string => "has component";

  "comp[f]" string => "is an element of";
  "comp[b]" string => "consists of";

  "version[f]" string => "is a version of";
  "version[b]" string => "has version";

  "prom[f]" string => "is a promise type in";
  "prom[b]" string => "has promise types";

  "better[f]" string => "is replaced by";
  "better[b]" string => "replaces";

  "var[fb]" string => "is a variant of";

  "man[f]" string => "is managed by";
  "man[b]" string => "is used to manage";


  #
  # Some related topics form a promise "group by association"
  #

  "linux_distros" slist => { "suse", "ubuntu", "fedora", "redhat", "debian", "slackware", "gentoo" };

  "cf2_actions"   slist => {
                           "acl",
                           "alerts",
                           "binservers",
                           "broadcast",
                           "copy",
                           "defaultroute",
                           "disks",
                           "directories",
                           "disable",
                           "editfiles",
                           "files",
                           "filters",
                           "groups",
                           "homeservers",
                           "ignore",
                           "import",
                           "interfaces",
                           "links",
                           "mailserver",
                           "methods",
                           "miscmounts",
                           "mountables",
                           "processes",
                           "packages",
                           "rename",
                           "required",
                           "resolve",
                           "scli",
                           "shellcommands",
                           "strategies",
                           "tidy",
                           "unmount" 
                           };

  "cf3_actions"   slist => { "vars", "files", "processes", "commands", "storage", "reports", "topics", "occurrences" };

  "nova_actions"  slist => { "databases", "measurements" };

  "all_actions"   slist => { @(cf3_actions), @(cf2_actions), @(nova_actions) };

  "nova_features"  slist => { "ldap integration", "sql integration", "windows registry editing", "impact analysis",
                              "access control list management", "serving literal data", "syntax lookup" };

  #

topics:

 ########################################################################
 # untyped topics are foundation
 ########################################################################

 # Put these here as short cuts from the front page

   "Frequently Asked Topics" association => a("see also","getting started with cfengine","see also");
   "Frequently Asked Topics" association => a("see also","research","see also");
   "Frequently Asked Topics" association => a("see also","troubleshooting","see also");


 Frequently_Asked_Topics::

   "getting started with cfengine"   comment => "Basic concepts and tips";
   "management issues"               comment => "Decision making support";
   "information categories"          comment => "Document types";
   "miscellaneous concepts"          comment => "An orphanage for unclassified concepts";
   "technical concepts"              comment => "Unfamiliar phrases and technical terms";
   "operating systems"               comment => "System software";
   "persons"                         comment => "Historical and resource figure-heads";
   "procedures"                      comment => "Application areas for policy";
   "networking"                      comment => "TCP/IP configuration";
   "security"                        comment => "Defending an acceptable level of risk";


 ########################################################################
 # typed topics
 ########################################################################

  functionality::

   "$(nova_features)"        association => a("is provided by","cfengine nova","offers functionality");

   "ldap integration" comment => "The ability to read and match values in LDAP repositories"; 
   "sql integration"  comment => "The ability to read values from SQL databases and verify database structural integrity";
   "windows registry editing" comment => "The ability to edit the MS Windows registry, scan and repair it";
   "impact analysis" comment => "The ability to code and visualize relationships between promises";
   "access control list management" comment => "The ability to specify and maintain file system ACLs";
   "serving literal data" comment => "The ability to code strings directly into cf-serverd for authorized distribution to clients, e.g. password hashes for password management";
   "syntax lookup" comment => "The ability to look up cfengine 3 syntax on the command line using cf-know --syntax";

  procedures::

    "setup"                     association => a("$(same[f])","Installation and major changes","$(same[f])");
    "troubleshooting"           comment => "Diagnosing behaviour";

    "change detection scans";

    "creating files";
    "compressing files";
    "creating network roles";
    "create a tripwire"         comment => "Creating a tripwire for unauthorized changes",
                                association => a("$(same[f])","Change detection scans","$(same[f])");

    "dealing with a firewall";

    "garbage collection"        comment => "Tidying and deleting files";
    "editing files"
                                association => a("$(impl[b])","edit_line","$(impl[f])");
    "editing tabular files"
                                association => a("$(impl[b])","edit_line","$(impl[f])");
    "set values"                comment => "Setting the values of variables in configuration files",
                                association => a("$(impl[b])","edit_line","$(impl[f])");

    "file copying"              association => a("$(impl[b])","copy_from","$(impl[f])");
    "file distribution"         comment => "Copying software or data from remote systems",
                                association => a("$(same[f])","file copying","$(same[f])");
    "copy then edit"            comment => "Copy a file template and then custom-edit it";
    "generate root passwords";
    "distribute root passwords";
    "ssh key distribution";

    "system hardening"  comment => "Cleaning up unnecessary potential vulnerabilities present in the default configurations of systems",
                        association => a("is an aspect of","compliance","is improved by");
  
    "build virtual machines";
    "build solaris zones";
    "build an HPC cluster";
    "build a web farm";
    "build workstation environments";

    "integrate cfengine with jumpstart/kickstart";
    "host network configuration";
    "how to setup mail transfer agent";

    "killing processes"  association => a("$(impl[b])","processes","$(impl[f])");

    "logging";

    "log rotation"        comment => "The procedure of periodically renaming logs retaining the history of the last N periods",
                      association => a("also found under","Log rotation","also found under");



    "legacy systems"          comment => "managing legacy systems with cfengine";

    "patching systems"    comment => "Deploying and installing targeted changes with version control", 
                          association => a("$(impl[b])","copy_from","$(impl[f])");

    "patching systems"     association => a("$(impl[b])","hashmatch","$(impl[f])");

    "restart a server" association => a("$(impl[b])","processes","$(impl[f])");

    "replication"   comment => "Mass producing almost identical configurations";

    "remove dead links" association => a("$(impl[b])","body_constraints::rmdeadlinks","$(impl[f])");

    "scheduling"      comment => "Deciding the time and place for a job to be executed",
                  association => a("is discussed in","What is scheduling?","discusses");

    "distributed scheduling"      comment => "Coordinating times and places for job execution",
                  association => a("is discussed in","What is distributed scheduling?","discusses");

    "software deployment" association => a("is discussed in","Application Management","discusses");
    "software deployment" association => a("is discussed in","BDIM","discusses");

    "stopping"        comment => "Stopping processes or services",
                  association => a("$(impl[b])","processes","$(impl[f])");

    "starting"        comment => "Starting processes or services",
                  association => a("$(impl[b])","processes","$(impl[f])");

    "synchronizing files" comment => "Making target files exact copies of a trusted source";

    "job scheduling"  comment => "Deciding the time and place for a job to be executed",
                  association => a("is discussed in","What is scheduling?","discusses");

    "job scheduling"  comment => "Deciding the time and place for a job to be executed",
                  association => a("is the same as","scheduling","is the same as");

    "distributed scheduling" comment => "Deciding the time and place for multiple distributed jobs to be executed",
                         association => a("is discussed in","Summary of Distributed Scheduling","discusses");

    "set up DNS server";
    "set up a web server"           association => a("$(impl[b])","web server modules","$(impl[f])");
    "set up a PXE boot server";
    "set up a neighbourhood watch" comment => "Implement redundant change detection";
    "set up name resolution"       association => a("$(same[f])","set up resolv.conf","$(same[f])");
    "set up resolv.conf";
    "setting values"   comment => "Setting configuration parameters in files", 
                          association => a("$(impl[b])","edit_line","$(impl[f])");

 ########################################################################

 miscellaneous_concepts::

   "applications";

   "pattern matching";


   "parallelizing promises" 
                 comment => "Increase efficiency of promise verification by de-serializing",
                 association => a("$(impl[b])","body_constraints::background","$(impl[f])");

   "column editing" association => a("$(same[f])","editing tabular files","$(same[f])");

   "column editing" association => a("$(impl[f])","procedures::changing passwords","$(impl[b])");

   "commands and tools"              comment => "Common tools used with cfengine";
   "functionality"                   comment => "Features and possibilities";

   "loops in cfengine"  association => a("$(same[f])","iteration","$(same[f])");
   "planning";

   "scenarios";   

   "hello world" comment => "A simple cfengine get-started program";

   "features";
   "naming";

   "searching";
   "process filters"  association => a("$(same[f])","process_select","$(same[f])");
   "Iteration"        comment => "Repeating i.e. re-iterating a promise multiple times, often with variations";

   "iteration"        association => a("$(same[f])","Iteration","$(same[f])");

   "regular expression matching" association => a("$(same[f])","regular expressions","$(same[f])");
   "wildcards"; 
   "wildcards in directory names"; 

   "system installation" association => a("$(same[f])","Installation","$(same[b])");

   "HPC" comment => "High Performance Computing";

   "packaging";
   "customizing inputs";
   "remediation"     association => a("$(same[f])","Rollback","$(same[b])");     
   "revision control";

   "other tools";


   "trust"          association => a("$(solve2[f])","Key exchange","$(solve2[b])"),
                    comment => "A cost-saving acceptance of a possible but deemed unlikely risk.";
   "trust"          association => a("see also","Trust","see also");

   "windows registry"  association => a("$(impl[b])","databases","$(impl[f])");     

 ########################################################################

pattern_matching::

   "regular expressions" association => a("$(same[f])","regular expression matching","$(same[b])");     
   "back references" association => a("are a feature of","regular expressions","have capability");     
   "selecting processes";
   "selecting files";
   "selecting lines in a file";
   "file comparisons";
   "wildcards"      association => a("$(d[f])","wildcards in directory names","$(d[b])");
   "wildcards"      association => a("$(d[f])","wildcards and regular expressions","$(d[b])");

  cfengine_2_control_settings::

    "warnnonusermail"      association => a("$(tm.use[f])","identity management","$(tm.use[b])");
    "warnnonuserfiles"     association => a("$(tm.use[f])","identity management","$(tm.use[b])");
    "deletenonusermail"    association => a("$(tm.use[f])","identity management","$(tm.use[b])");
    "deletenonuserfiles"   association => a("$(tm.use[f])","identity management","$(tm.use[b])");

  cfengine_nova::

    "ldap functions";
    "server functions";

 ########################################################################

  Persons::

    "Alva Couch"
       association => a("is one of the contributors to","convergent operators","was developed by");

    "Jan Bergstra"
       association => a("is one of the contributors to","promise theory","was developed by");

    "Mark Burgess"
       association => a("designed","cfengine","was designed by");
    "Mark Burgess"
       association => a("originated the idea of","convergent operators","was originated by");
    "Mark Burgess"
       association => a("is one of the contributors to","promise theory","was developed by");

    "Steve Pepper"
       association => a("is one of the contributors to","topic maps","was developed by");


 ########################################################################

  Book::

    "Principles of Network and System Administration"
       association => a("$(wrote[b])","Mark Burgess","$(wrote[f])");

    "Analytical Network and System Administration"
       association => a("$(wrote[b])","Mark Burgess","$(wrote[f])");

    "Handbook of Network and System Administration"
       association => a("$(edited[b])","Mark Burgess","$(edited[f])");

    "Handbook of Network and System Administration"
       association => a("$(edited[b])","Jan Bergstra","$(edited[f])");

 ########################################################################

  information_categories::

   "book";
   "chapter";
   "chapter section";
   "cfengine reference";
   "definitions";
   "example";
   "hints";
   "introduction";
   "paper";
   "popular science";
   "topic maps";
   "tutorial";
   "wikipedia";
   "manual"                         comment => "Manuals and guides";
   "logs"                            comment => "System generated notifications",
                                     association => a("see also","logging","see also");



  manual::

   "cf2 reference";
   "cf3 reference";



occurrences:

   how_to_use_the_library::

      "You can browse the library for code, examples, or ask to learn about special topics. Try typing in a specific word or search phrase, and use the different tabs in the topic viewer to look for additional hints and tips.",

          represents => { "hint" },
      representation => "literal";


    "/docs/st-missionportal.html"
         represents => { "Mission portal manual" };


   cfengine.company::

       "http://www.cfengine.com"
          represents => { "website" };

     "The company supporting the Cfengine software",
          represents => { "Text" },
      representation => "literal";

   cfengine.software::

       "http://www.cfengine.org"
          represents => { "website" };

     "The Cfengine software",
          represents => { "Text" },
      representation => "literal";


   services::

       "http://en.wikipedia.org/wiki/Service"
          represents => { "Wikipedia article" };


   vars_promises.policy::

     "Variable redefinition policy",
          represents => { "Text" },
      representation => "literal";


   system_policy::

     "/docs/CfengineStdLibrary.html",
         represents => { "Standard library" };

    "/docs/cf3-bestpractice.html#Policy-Style-Guide"
         represents => { "Style guide for best practice" };

    "/docs/st-itil.html#Policy"
         represents => { "ITIL's definition" };

   wikipedia::

       "http://en.wikipedia.org/wiki/Main_Page"
          represents => { "Wikipedia article" };



   applications::

      "The major solution areas in which cfengine is involved"
            represents => { "definitions" },
            representation => "literal";

   patching_systems::

       "The ability to upgrade existing services and applications effectively. Cfengine allows automatic patch upgrading. From a policy you can describe how to patch services and applications (when, how, frequency, automatic, etc.). Make the patches available from the network, and you can have Cfengine promise the necessary services and application at all time run the latest patches."

      represents => { "explanation" },
      representation => "literal";


  pattern_matching::

     "/docs/cf3-reference#Pattern-matching-and-referencing"
          represents => { "cf" };

  regular_expressions::

     "/docs/cf3-reference#Pattern-matching-and-referencing"
          represents => { "cf" };

}

 ###################################################

bundle knowledge manual_entries

{
occurrences: 


 trust::

   "http://research.iu.hio.no/papers/trust.pdf",
            represents => { "paper" };

 Frequently_Asked_Topics::

  "http://www.cfengine.org/pages/manual_guides",
            represents => { "FAQs" };

 automation::

   "https://cfengine.com/inside/manuals/cf3-tutorial#System-automation"
            represents => { "Motivation" };


  Mark_Burgess::

     "mailto:mark@cfengine.com"

            represents => { "email address" };

     "http://www.iu.hio.no/~mark"
            represents => { "Home Page" };


  loops_in_cfengine::
 
     "/docs/st-iterate.html",
      represents => { "definitions", "Example" };


  ssh_key_distribution::

      "/docs/cf3-solutions#Distribute-ssh-keys"
      represents => { "Example" };

  Iteration::

      "/docs/st-iterate.html"
      represents => { "introduction" };

  scheduling::

      "/docs/st-schedule.html"
      represents => { "introduction" };

      "/docs/st-distsched.html"
      represents => { "introduction" };

  distributed_scheduling::

      "/docs/st-schedule.html"
      represents => { "introduction" };

      "/docs/st-distsched.html"
      represents => { "introduction" };

  workflows::

      "/docs/st-schedule.html"
      represents => { "introduction" };

      "/docs/st-distsched.html"
      represents => { "introduction" };

  Understanding_Dependencies::
 
      "/docs/st-federation.html"
      represents => { "About Hierarchies" };

  federated_architecture::
 
      "/docs/st-federation.html"
      represents => { "special topics guide" };

  cloud_computing::      

      "/docs/st-cloud.html"
      represents => { "special topics guide" };

 cloud::
      "/docs/st-cloud.html"
      represents => { "special topics guide" };

}

###############################################################################

bundle knowledge enterprise_knowledge
{
topics:



occurrences:

 mission_status::

   "/welcome/status"

            represents => { "network host status" };

   "/welcome/weakest_host"

            represents => { "weakest hosts" };

   "/welcome/status"
            represents => { "portal" };


 host_portal::

   "/welcome/status"

            represents => { "host state" },
            representation => "url";



 performance_report::

   "/welcome/status"

            represents => { "on page" },
            representation => "url";

   "Describes the real time it has taken on average to complete or keep promises"

            represents => { "description" },
            representation => "literal";


 classes_report::

   "Shows classes defined on the current host. Provides discovered information and dynamic properties of the system. Probabilities that classes have been defined are based on actual observation."

            represents => { "description" },
            representation => "literal";

   "/welcome/status"

            represents => { "on page" },
            representation => "url";

 variables_report::

   "Shows the values of variables used on each host. Some discovered, some defined."

            represents => { "description" },
            representation => "literal";

   "/welcome/status"

            represents => { "on page" },
            representation => "url";

 lastseen_report::

   "When was the last time the current host contacted or was contacted by another? (+) indicates contacted, (-) indicates was contacted by."

            represents => { "description" },
            representation => "literal";

   "/welcome/status"

            represents => { "on page" },
            representation => "url";

 compliance_report::

   "Show the status of all promises, along with average compliance. Useful for quick auditing."

            represents => { "description" },
            representation => "literal";

   "/welcome/status"

            represents => { "on page" },
            representation => "url";

 promises_repaired_report::

   "Show the log of recently repaired promises. For debugging"

            represents => { "description" },
            representation => "literal";

   "/welcome/status"

            represents => { "on page" },
            representation => "url";

 promises_not_kept_report::

   "Show the log of recently failed or unkept promises. For debugging"

            represents => { "description" },
            representation => "literal";

   "/welcome/status"

            represents => { "on page" },
            representation => "url";

 promise_report::

   "Show the status of named policy promises, along with average compliance. Useful for quick auditing."

            represents => { "description" },
            representation => "literal";

   "/welcome/status"

            represents => { "on page" },
            representation => "url";

 setuid_report::

   "List the discovered setuid/setgid root programs on the system (Unix only)"

            represents => { "description" },
            representation => "literal";

   "/welcome/status"

            represents => { "on page" },
            representation => "url";

 file_changes_report::

   "A log of changes to files promised under change monitoring"

            represents => { "description" },
            representation => "literal";

   "/welcome/status"

            represents => { "on page" },
            representation => "url";

 file_diffs_report::

   "A log of diffs of files promised under change monitoring"

            represents => { "description" },
            representation => "literal";

   "/welcome/status"

            represents => { "on page" },
            representation => "url";

 software_installed_report::

   "OS software packages installed and their version information."

            represents => { "description" },
            representation => "literal";

   "/welcome/status"

            represents => { "on page" },
            representation => "url";

 patches_installed_report::

   "For systems with a separate patch model, this shows OS software patches. There are two reports (for current status and patches that are available but not already applied)"

            represents => { "description" },
            representation => "literal";

   "/welcome/status"

            represents => { "on page" },
            representation => "url";


 service_catalogue::
 
   "/welcome/services"

            represents => { "on page" },
            representation => "url";

}

